// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tracking.Data;

#nullable disable

namespace Tracking.Data.Migrations
{
    [DbContext(typeof(TrackingDbContext))]
    partial class TrackingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CheckExternalReference", b =>
                {
                    b.Property<string>("ChecksId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalReferencesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChecksId", "ExternalReferencesId");

                    b.HasIndex("ExternalReferencesId");

                    b.ToTable("CheckExternalReference");
                });

            modelBuilder.Entity("PieceProduct", b =>
                {
                    b.Property<string>("ContentDescribedByProductsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DescriptionForContentOfPiecesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContentDescribedByProductsId", "DescriptionForContentOfPiecesId");

                    b.HasIndex("DescriptionForContentOfPiecesId");

                    b.ToTable("PieceProduct");
                });

            modelBuilder.Entity("PriceRatings", b =>
                {
                    b.Property<string>("ForPricesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RatingsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ForPricesId", "RatingsId");

                    b.HasIndex("RatingsId");

                    b.ToTable("PriceRatings");
                });

            modelBuilder.Entity("Tracking.Data.Model.AccessDelegation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HasDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotifyRequestStatusChange")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessDelegation");
                });

            modelBuilder.Entity("Tracking.Data.Model.AccessPermissions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HasLogisticsAgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HasLogisticsAgentId");

                    b.ToTable("AccessPermissions");
                });

            modelBuilder.Entity("Tracking.Data.Model.ActivitySequence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SequenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("ActivitySequence");
                });

            modelBuilder.Entity("Tracking.Data.Model.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCodeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostOfficeBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddressLines")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Tracking.Data.Model.Adjustments", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CorrectionNumber")
                        .HasColumnType("int");

                    b.Property<string>("CorrectionSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsForAdjustments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillingDetailsId");

                    b.ToTable("Adjustments");
                });

            modelBuilder.Entity("Tracking.Data.Model.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerValueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenAtLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerActorId");

                    b.HasIndex("AnswerValueId");

                    b.HasIndex("GivenAtLocationId");

                    b.ToTable("Answer");

                    b.HasDiscriminator().HasValue("Answer");
                });

            modelBuilder.Entity("Tracking.Data.Model.BillingDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AwbAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AwbDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AwbExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AwbUseIndicator")
                        .HasColumnType("bit");

                    b.Property<double>("Commission")
                        .HasColumnType("float");

                    b.Property<bool>("CommissionIndicator")
                        .HasColumnType("bit");

                    b.Property<double>("CommissionPercentage")
                        .HasColumnType("float");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float");

                    b.Property<int>("NbCorrections")
                        .HasColumnType("int");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TaxDueAgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaxDueAirlineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VatIndicator")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TaxDueAgentId");

                    b.HasIndex("TaxDueAirlineId");

                    b.ToTable("BillingDetails");

                    b.HasDiscriminator().HasValue("BillingDetails");
                });

            modelBuilder.Entity("Tracking.Data.Model.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingRequestId")
                        .IsUnique()
                        .HasFilter("[BookingRequestId] IS NOT NULL");

                    b.ToTable("Booking");

                    b.HasDiscriminator().HasValue("Booking");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarrierProductInfoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromCarrierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProposedWaybillNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequestMatchInd")
                        .HasColumnType("bit");

                    b.Property<string>("RequestRefId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipmentSecurityStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingRequestId")
                        .IsUnique()
                        .HasFilter("[BookingRequestId] IS NOT NULL");

                    b.HasIndex("CarrierProductInfoId");

                    b.HasIndex("FromCarrierId");

                    b.HasIndex("RequestRefId");

                    b.HasIndex("TransportMovementId");

                    b.ToTable("BookingOption");

                    b.HasDiscriminator().HasValue("BookingOption");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingOptionRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Allotment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingShipmentDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedCommodities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RatingsPreferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestedHandling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipmentDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipmentSecurityStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitsPreferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookingShipmentDetailsId");

                    b.HasIndex("RatingsPreferenceId");

                    b.HasIndex("ShipmentDetailsId");

                    b.HasIndex("TransportMovementId");

                    b.HasIndex("UnitsPreferenceId");

                    b.ToTable("BookingOptionRequest");

                    b.HasDiscriminator().HasValue("BookingOptionRequest");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookingRequest");

                    b.HasDiscriminator().HasValue("BookingRequest");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingShipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TotalDimensionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TotalGrossWeightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalPieceCount")
                        .HasColumnType("int");

                    b.Property<string>("TotalVolumetricWeightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TotalDimensionsId");

                    b.HasIndex("TotalGrossWeightId");

                    b.HasIndex("TotalVolumetricWeightId");

                    b.ToTable("BookingShipment");

                    b.HasDiscriminator().HasValue("BookingShipment");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingTimes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EarliestAcceptanceTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LatestAcceptanceTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LatestArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOfAvailability")
                        .HasColumnType("datetime2");

                    b.Property<string>("TotalTransitTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingOptionId")
                        .IsUnique()
                        .HasFilter("[BookingOptionId] IS NOT NULL");

                    b.HasIndex("BookingOptionRequestId")
                        .IsUnique()
                        .HasFilter("[BookingOptionRequestId] IS NOT NULL");

                    b.ToTable("BookingTimes");
                });

            modelBuilder.Entity("Tracking.Data.Model.CarrierProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceLevelCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarrierProduct");
                });

            modelBuilder.Entity("Tracking.Data.Model.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacteristicType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TextualValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfProductId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Tracking.Data.Model.Check", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckTotalResultId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Co2EmissionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComposingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomsInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DgDeclarationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DgProductRadioactiveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DgRadioactiveIsotopeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EpermitConsignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EpermitSignatureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InsuranceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IotDeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LiveAnimalsEpermitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingMaterialId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationOfPerformanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PackagingTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PriceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RatingsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoutingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityDeclarationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoringId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportLegsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportMeansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitCompositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsedTemplateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WaybillId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("BillingDetailsId");

                    b.HasIndex("BookingId");

                    b.HasIndex("BookingOptionId");

                    b.HasIndex("BookingOptionRequestId");

                    b.HasIndex("BookingRequestId");

                    b.HasIndex("BookingShipmentId");

                    b.HasIndex("CheckId");

                    b.HasIndex("CheckTotalResultId");

                    b.HasIndex("CheckerId");

                    b.HasIndex("Co2EmissionsId");

                    b.HasIndex("ComposingId");

                    b.HasIndex("CustomsInformationId");

                    b.HasIndex("DgDeclarationId");

                    b.HasIndex("DgProductRadioactiveId");

                    b.HasIndex("DgRadioactiveIsotopeId");

                    b.HasIndex("EpermitConsignmentId");

                    b.HasIndex("EpermitSignatureId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("IotDeviceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LiveAnimalsEpermitId");

                    b.HasIndex("LoadingActivityId");

                    b.HasIndex("LoadingId");

                    b.HasIndex("LoadingMaterialId");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("LocationOfPerformanceId");

                    b.HasIndex("MovingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PackagingTypeId");

                    b.HasIndex("PieceId");

                    b.HasIndex("PriceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RatingsId");

                    b.HasIndex("RoutingId");

                    b.HasIndex("SecurityDeclarationId");

                    b.HasIndex("SensorId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("StorageId");

                    b.HasIndex("StoringId");

                    b.HasIndex("TransportLegsId");

                    b.HasIndex("TransportMeansId");

                    b.HasIndex("TransportMovementId");

                    b.HasIndex("UnitCompositionId");

                    b.HasIndex("UsedTemplateId");

                    b.HasIndex("WaybillId");

                    b.ToTable("Check");

                    b.HasDiscriminator().HasValue("Check");
                });

            modelBuilder.Entity("Tracking.Data.Model.CheckTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("LegacyTemplateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TemplatePurpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LegacyTemplateId");

                    b.ToTable("CheckTemplate");

                    b.HasDiscriminator().HasValue("CheckTemplate");
                });

            modelBuilder.Entity("Tracking.Data.Model.CheckTotalResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertifiedByActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<string>("ResultValueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertifiedByActorId");

                    b.HasIndex("ResultValueId");

                    b.ToTable("CheckTotalResult");

                    b.HasDiscriminator().HasValue("CheckTotalResult");
                });

            modelBuilder.Entity("Tracking.Data.Model.Co2Emissions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CalculatedEmissionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CalculationForTransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalculatedEmissionsId");

                    b.HasIndex("CalculationForTransportMovementId");

                    b.ToTable("CO2Emissions");

                    b.HasDiscriminator().HasValue("Co2Emissions");
                });

            modelBuilder.Entity("Tracking.Data.Model.Composing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompositionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationOfPerformanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitCompositionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("LocationOfPerformanceId");

                    b.HasIndex("UnitCompositionId");

                    b.ToTable("Composing");

                    b.HasDiscriminator().HasValue("Composing");
                });

            modelBuilder.Entity("Tracking.Data.Model.ContactDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComposingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactDetailType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoringId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TextualValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitCompositionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CheckId");

                    b.HasIndex("ComposingId");

                    b.HasIndex("LoadingActivityId");

                    b.HasIndex("LoadingId");

                    b.HasIndex("MovingId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StorageId");

                    b.HasIndex("StoringId");

                    b.HasIndex("TransportMovementId");

                    b.HasIndex("UnitCompositionId");

                    b.ToTable("ContactDetail");
                });

            modelBuilder.Entity("Tracking.Data.Model.Context", b =>
                {
                    b.Property<string>("Api")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vocab")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Context");
                });

            modelBuilder.Entity("Tracking.Data.Model.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Tracking.Data.Model.CustomsInformation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuedForPieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherCustomsInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssuedForPieceId");

                    b.ToTable("CustomsInformation");

                    b.HasDiscriminator().HasValue("CustomsInformation");
                });

            modelBuilder.Entity("Tracking.Data.Model.DgDeclaration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AircraftLimitationInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplianceDeclarationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExclusiveUseIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("HandlingInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuedForPieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipperDeclarationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssuedForPieceId");

                    b.ToTable("DgDeclaration");

                    b.HasDiscriminator().HasValue("DgDeclaration");
                });

            modelBuilder.Entity("Tracking.Data.Model.DgProductRadioactive", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DgRaTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FissileExceptionIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("FissileExceptionReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<int>("TransportIndexNumeric")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DgProductRadioactive");

                    b.HasDiscriminator().HasValue("DgProductRadioactive");
                });

            modelBuilder.Entity("Tracking.Data.Model.DgRadioactiveIsotope", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityLevelMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentOfDgProductRadioactiveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CriticalitySafetyIndexNumeric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsotopeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsotopeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LowDispersibleIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalChemicalForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialFormIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentOfDgProductRadioactiveId");

                    b.ToTable("DgRadioactiveIsotope");

                    b.HasDiscriminator().HasValue("DgRadioactiveIsotope");
                });

            modelBuilder.Entity("Tracking.Data.Model.Dimensions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HeightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LengthId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolumeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WidthId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HeightId");

                    b.HasIndex("LengthId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("VolumeId");

                    b.HasIndex("WidthId");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("Tracking.Data.Model.EpermitConsignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminingQuantityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedToDateQuotaQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExaminingQuantityId");

                    b.HasIndex("PermitId");

                    b.ToTable("EpermitConsignment");

                    b.HasDiscriminator().HasValue("EpermitConsignment");
                });

            modelBuilder.Entity("Tracking.Data.Model.EpermitSignature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForEpermitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStampId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatoryCompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SignatoryRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignatureStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForEpermitId");

                    b.HasIndex("SignatoryCompanyId");

                    b.ToTable("EpermitSignature");

                    b.HasDiscriminator().HasValue("EpermitSignature");
                });

            modelBuilder.Entity("Tracking.Data.Model.Error", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HasTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Error");
                });

            modelBuilder.Entity("Tracking.Data.Model.ErrorDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ErrorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HasCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasProperty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasResource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId");

                    b.ToTable("ErrorDetail");
                });

            modelBuilder.Entity("Tracking.Data.Model.ExternalReference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckTemplateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckTotalResultId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Checksum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Co2EmissionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComposingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomsInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DgDeclarationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DgProductRadioactiveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DgRadioactiveIsotopeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DocumentIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpermitConsignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EpermitSignatureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalReferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InsuranceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IotDeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LiveAnimalsEpermitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingMaterialId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationOfCreationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PackagingTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PriceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PublicAuthorityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RatingsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoutingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityDeclarationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoringId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportLegsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportMeansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitCompositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("WaybillId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("BillingDetailsId");

                    b.HasIndex("BookingId");

                    b.HasIndex("BookingOptionId");

                    b.HasIndex("BookingOptionRequestId");

                    b.HasIndex("BookingRequestId");

                    b.HasIndex("BookingShipmentId");

                    b.HasIndex("CheckTemplateId");

                    b.HasIndex("CheckTotalResultId");

                    b.HasIndex("Co2EmissionsId");

                    b.HasIndex("ComposingId");

                    b.HasIndex("CustomsInformationId");

                    b.HasIndex("DgDeclarationId");

                    b.HasIndex("DgProductRadioactiveId");

                    b.HasIndex("DgRadioactiveIsotopeId");

                    b.HasIndex("EpermitConsignmentId");

                    b.HasIndex("EpermitSignatureId");

                    b.HasIndex("ExternalReferenceId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("IotDeviceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LiveAnimalsEpermitId");

                    b.HasIndex("LoadingActivityId");

                    b.HasIndex("LoadingId");

                    b.HasIndex("LoadingMaterialId");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("LocationOfCreationId");

                    b.HasIndex("MovingId");

                    b.HasIndex("OriginatorId");

                    b.HasIndex("PackagingTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PieceId");

                    b.HasIndex("PriceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PublicAuthorityId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RatingsId");

                    b.HasIndex("RoutingId");

                    b.HasIndex("SecurityDeclarationId");

                    b.HasIndex("SensorId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("StorageId");

                    b.HasIndex("StoringId");

                    b.HasIndex("TransportLegsId");

                    b.HasIndex("TransportMeansId");

                    b.HasIndex("TransportMovementId");

                    b.HasIndex("UnitCompositionId");

                    b.HasIndex("WaybillId");

                    b.ToTable("ExternalReference");

                    b.HasDiscriminator().HasValue("ExternalReference");
                });

            modelBuilder.Entity("Tracking.Data.Model.Geolocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ElevationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GeolocationUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ElevationId");

                    b.ToTable("Geolocation");
                });

            modelBuilder.Entity("Tracking.Data.Model.Insurance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoveringOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InsuredAmountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("NvdIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoveringOrganizationId");

                    b.HasIndex("InsuredAmountId");

                    b.HasIndex("ShipmentId")
                        .IsUnique()
                        .HasFilter("[ShipmentId] IS NOT NULL");

                    b.ToTable("Insurance");

                    b.HasDiscriminator().HasValue("Insurance");
                });

            modelBuilder.Entity("Tracking.Data.Model.IotDevice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssociatedObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IotDeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingMaterialId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManufacturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportMeansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IotDeviceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LoadingMaterialId");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PieceId");

                    b.HasIndex("SensorId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("TransportMeansId");

                    b.HasIndex("TransportOrganizationId");

                    b.ToTable("IotDevice");

                    b.HasDiscriminator().HasValue("IotDevice");
                });

            modelBuilder.Entity("Tracking.Data.Model.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContainedItemInPieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DescribedByProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DimensionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemQuantityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LotNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionCountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("QuantityForUnitPrice")
                        .HasColumnType("float");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TargetCountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitPriceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WeightId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContainedItemInPieceId");

                    b.HasIndex("DescribedByProductId");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("ItemQuantityId");

                    b.HasIndex("ProductionCountryId");

                    b.HasIndex("TargetCountryId");

                    b.HasIndex("TransportOrganizationId");

                    b.HasIndex("UnitPriceId");

                    b.HasIndex("WeightId");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tracking.Data.Model.LiveAnimalsEpermit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsigneeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CopyIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("EpermitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErmitTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermitTypeOtherDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionPurpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionPurposeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportContractId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportContractTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConsigneeId");

                    b.ToTable("LiveAnimalsEpermit");

                    b.HasDiscriminator().HasValue("LiveAnimalsEpermit");
                });

            modelBuilder.Entity("Tracking.Data.Model.Loading", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingPositionIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationOfPerformanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OnTransportMeansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoadingActivityId");

                    b.HasIndex("LocationOfPerformanceId");

                    b.HasIndex("OnTransportMeansId");

                    b.ToTable("Loading");

                    b.HasDiscriminator().HasValue("Loading");
                });

            modelBuilder.Entity("Tracking.Data.Model.LoadingActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoadingActivity");

                    b.HasDiscriminator().HasValue("LoadingActivity");
                });

            modelBuilder.Entity("Tracking.Data.Model.LoadingMaterial", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComposingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManufacturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComposingId");

                    b.HasIndex("LoadingId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("TransportOrganizationId");

                    b.ToTable("LoadingMaterial");

                    b.HasDiscriminator().HasValue("LoadingMaterial");
                });

            modelBuilder.Entity("Tracking.Data.Model.LoadingUnit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LoadingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TareWeightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoadingId");

                    b.HasIndex("TareWeightId");

                    b.HasIndex("TransportOrganizationId");

                    b.ToTable("LoadingUnit");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LoadingUnit");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tracking.Data.Model.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeolocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoutingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("GeolocationId");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.HasIndex("RoutingId");

                    b.ToTable("Location");

                    b.HasDiscriminator().HasValue("Location");
                });

            modelBuilder.Entity("Tracking.Data.Model.LogisticsAgent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogisticsAgent");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LogisticsAgent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tracking.Data.Model.LogisticsEventCollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HasTotalItem")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogisticsEventCollection");
                });

            modelBuilder.Entity("Tracking.Data.Model.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("MeasurementTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasurementValueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecordedGeolocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementValueId");

                    b.HasIndex("RecordedGeolocationId");

                    b.HasIndex("SensorId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("Tracking.Data.Model.MovementTimes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovementMilestone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovementTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MovementTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TransportMovementId");

                    b.ToTable("MovementTimes");
                });

            modelBuilder.Entity("Tracking.Data.Model.Moving", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationOfPerformanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationOfPerformanceId");

                    b.ToTable("Moving");

                    b.HasDiscriminator().HasValue("Moving");
                });

            modelBuilder.Entity("Tracking.Data.Model.NotificationEventType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationEventType");
                });

            modelBuilder.Entity("Tracking.Data.Model.Operation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatchOperationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Predicate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatchOperationId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("Tracking.Data.Model.OperationObject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HasDatatype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationObject");
                });

            modelBuilder.Entity("Tracking.Data.Model.OtherIdentifier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingMaterialId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherIdentifierType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TextualValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("LoadingMaterialId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PieceId");

                    b.HasIndex("ProductId");

                    b.ToTable("OtherIdentifier");
                });

            modelBuilder.Entity("Tracking.Data.Model.PackagingType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackagingType");

                    b.HasDiscriminator().HasValue("PackagingType");
                });

            modelBuilder.Entity("Tracking.Data.Model.Party", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckTemplateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("BookingOptionId");

                    b.HasIndex("CheckTemplateId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PartyDetailsId");

                    b.HasIndex("PieceId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("WaybillId");

                    b.ToTable("Party");
                });

            modelBuilder.Entity("Tracking.Data.Model.PatchOperation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatchOperation");
                });

            modelBuilder.Entity("Tracking.Data.Model.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessDelegationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessPermissionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccessDelegationId");

                    b.HasIndex("AccessPermissionsId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Tracking.Data.Model.Piece", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Coload")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComposingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContainedPieceInPieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentProductionCountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeclaredValueForCarriage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeclaredValueForCustoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("FulfillsUldTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrossWeightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("NvdForCarriage")
                        .HasColumnType("bit");

                    b.Property<bool>("NvdForCustoms")
                        .HasColumnType("bit");

                    b.Property<string>("PackageMarkCoded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackagedeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackagingTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartOfShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingMarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<int>("Slac")
                        .HasColumnType("int");

                    b.Property<bool>("Stackable")
                        .HasColumnType("bit");

                    b.Property<string>("TransportOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Turnable")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UldReferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Upid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolumetricWeightId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ComposingId");

                    b.HasIndex("ContainedPieceInPieceId");

                    b.HasIndex("ContentProductionCountryId");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("GrossWeightId");

                    b.HasIndex("LoadingId");

                    b.HasIndex("PackagingTypeId");

                    b.HasIndex("PartOfShipmentId");

                    b.HasIndex("TransportOrganizationId");

                    b.HasIndex("UldReferenceId");

                    b.HasIndex("VolumetricWeightId");

                    b.ToTable("Piece");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Piece");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tracking.Data.Model.Price", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarrierChargeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForBookingOptionRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("float");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidUntil")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingOptionId")
                        .IsUnique()
                        .HasFilter("[BookingOptionId] IS NOT NULL");

                    b.HasIndex("ForBookingOptionRequestId");

                    b.ToTable("Price");

                    b.HasDiscriminator().HasValue("Price");
                });

            modelBuilder.Entity("Tracking.Data.Model.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommodityItemNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("HsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HsCommodityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HsCommodityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HsType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Product");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tracking.Data.Model.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerOptionsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerOptionsValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckTemplateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionsNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionsSection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId")
                        .IsUnique()
                        .HasFilter("[AnswerId] IS NOT NULL");

                    b.HasIndex("CheckTemplateId");

                    b.ToTable("Question");

                    b.HasDiscriminator().HasValue("Question");
                });

            modelBuilder.Entity("Tracking.Data.Model.Ranges", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("MaximumQuantity")
                        .HasColumnType("float");

                    b.Property<double>("MinimumQuantity")
                        .HasColumnType("float");

                    b.Property<string>("RateClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RatingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RatingsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Scr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitBasis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RatingsId");

                    b.ToTable("Ranges");
                });

            modelBuilder.Entity("Tracking.Data.Model.Ratings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("BillingChargeIdentifier")
                        .HasColumnType("float");

                    b.Property<string>("ChargeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChargeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChargePaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChargeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entitlement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherChargeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceSpecification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceSpecificationRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RateQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RatingsType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rcp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasDiscriminator().HasValue("Ratings");
                });

            modelBuilder.Entity("Tracking.Data.Model.RegulatedEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwningOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegulatedEntityCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegulatedEntityExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegulatedEntityIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityDeclarationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwningOrganizationId");

                    b.HasIndex("SecurityDeclarationId");

                    b.ToTable("RegulatedEntity");
                });

            modelBuilder.Entity("Tracking.Data.Model.RequestStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestStatus");
                });

            modelBuilder.Entity("Tracking.Data.Model.Routing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AircraftPossibilityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingOptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FsInd")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestArrivalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxConnections")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineInd")
                        .HasColumnType("bit");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingOptionId")
                        .IsUnique()
                        .HasFilter("[BookingOptionId] IS NOT NULL");

                    b.HasIndex("BookingOptionRequestId")
                        .IsUnique()
                        .HasFilter("[BookingOptionRequestId] IS NOT NULL");

                    b.ToTable("Routing");

                    b.HasDiscriminator().HasValue("Routing");
                });

            modelBuilder.Entity("Tracking.Data.Model.ScheduledLegs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ArrivalLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartureLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LegSequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoutingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalLocationId");

                    b.HasIndex("DepartureLocationId");

                    b.HasIndex("RoutingId");

                    b.ToTable("ScheduledLegs");
                });

            modelBuilder.Entity("Tracking.Data.Model.SecurityDeclaration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdditionalSecurityInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroundsForExemption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherScreeningMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceivedFromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegulatedEntityIssuerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScreeningMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssuedById");

                    b.HasIndex("PieceId")
                        .IsUnique()
                        .HasFilter("[PieceId] IS NOT NULL");

                    b.HasIndex("ReceivedFromId");

                    b.HasIndex("RegulatedEntityIssuerId");

                    b.ToTable("SecurityDeclaration");

                    b.HasDiscriminator().HasValue("SecurityDeclaration");
                });

            modelBuilder.Entity("Tracking.Data.Model.Sensor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IotDeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IotDeviceId");

                    b.HasIndex("TransportOrganizationId");

                    b.ToTable("Sensor");

                    b.HasDiscriminator().HasValue("Sensor");
                });

            modelBuilder.Entity("Tracking.Data.Model.Shipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoodsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Incoterms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherChargesIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TotalGrossWeightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalSlac")
                        .HasColumnType("int");

                    b.Property<string>("TotalVolumetricWeightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightValuationIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryLocationId");

                    b.HasIndex("TotalGrossWeightId");

                    b.HasIndex("TotalVolumetricWeightId");

                    b.ToTable("Shipment");

                    b.HasDiscriminator().HasValue("Shipment");
                });

            modelBuilder.Entity("Tracking.Data.Model.Storage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("StoringIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storage");

                    b.HasDiscriminator().HasValue("Storage");
                });

            modelBuilder.Entity("Tracking.Data.Model.Storing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationOfPerformanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoragePlaceIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoringType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationOfPerformanceId");

                    b.HasIndex("StorageId");

                    b.ToTable("Storing");

                    b.HasDiscriminator().HasValue("Storing");
                });

            modelBuilder.Entity("Tracking.Data.Model.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HasContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasSubscriberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HasTopic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasTopicTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IncludeSubscriptionEventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyRequestStatusChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendLogisticsObjectBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HasSubscriberId");

                    b.HasIndex("HasTopicTypeId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Tracking.Data.Model.TopicType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TopicType");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportLegs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArrivalLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartureLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LegNumber")
                        .HasColumnType("int");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalLocationId");

                    b.HasIndex("BookingOptionId");

                    b.HasIndex("DepartureLocationId");

                    b.ToTable("TransportLegs");

                    b.HasDiscriminator().HasValue("TransportLegs");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportMeans", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypicalCo2CoefficientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypicalFuelConsumptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TransportOrganizationId");

                    b.HasIndex("TypicalCo2CoefficientId");

                    b.HasIndex("TypicalFuelConsumptionId");

                    b.ToTable("TransportMeans");

                    b.HasDiscriminator().HasValue("TransportMeans");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportMovement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArrivalLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistanceCalculatedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistanceMeasuredId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExecutionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelAmountCalculatedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FuelAmountMeasuredId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeQualifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingTransportMeansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Seal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalLocationId");

                    b.HasIndex("DepartureLocationId");

                    b.HasIndex("DistanceCalculatedId");

                    b.HasIndex("DistanceMeasuredId");

                    b.HasIndex("FuelAmountCalculatedId");

                    b.HasIndex("FuelAmountMeasuredId");

                    b.HasIndex("OperatingTransportMeansId");

                    b.ToTable("TransportMovement");

                    b.HasDiscriminator().HasValue("TransportMovement");
                });

            modelBuilder.Entity("Tracking.Data.Model.UnitComposition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompositionIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitComposition");

                    b.HasDiscriminator().HasValue("UnitComposition");
                });

            modelBuilder.Entity("Tracking.Data.Model.Value", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("NumericalValue")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Value");
                });

            modelBuilder.Entity("Tracking.Data.Model.VolumetricWeight", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChargeableWeightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConversionFactorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeableWeightId");

                    b.HasIndex("ConversionFactorId");

                    b.ToTable("VolumetricWeight");
                });

            modelBuilder.Entity("Tracking.Data.Model.Waybill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountingInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArrivalLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CarrierDeclarationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CarrierDeclarationPlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarrierDeclarationSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsignorDeclarationSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomsOriginCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DestinationCharges")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationCurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DestinationCurrencyRate")
                        .HasColumnType("float");

                    b.Property<string>("MasterWaybillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ModularCheckNumber")
                        .HasColumnType("bit");

                    b.Property<string>("OriginCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferredBookingOptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingRefNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalLocationId");

                    b.HasIndex("BillingDetailsId")
                        .IsUnique()
                        .HasFilter("[BillingDetailsId] IS NOT NULL");

                    b.HasIndex("CarrierDeclarationPlaceId");

                    b.HasIndex("DepartureLocationId");

                    b.HasIndex("MasterWaybillId");

                    b.HasIndex("ReferredBookingOptionId")
                        .IsUnique()
                        .HasFilter("[ReferredBookingOptionId] IS NOT NULL");

                    b.HasIndex("ShipmentId")
                        .IsUnique()
                        .HasFilter("[ShipmentId] IS NOT NULL");

                    b.ToTable("Waybill");

                    b.HasDiscriminator().HasValue("Waybill");
                });

            modelBuilder.Entity("Tracking.Data.Model.ItemDg", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Item");

                    b.Property<string>("EmergencyContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NetWeightMeasureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportableQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplementaryInfoPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplementaryInfoSuffix")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("EmergencyContactId");

                    b.HasIndex("NetWeightMeasureId");

                    b.HasDiscriminator().HasValue("ItemDg");
                });

            modelBuilder.Entity("Tracking.Data.Model.ULD", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.LoadingUnit");

                    b.Property<string>("UldSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ULD");
                });

            modelBuilder.Entity("Tracking.Data.Model.Actor", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.LogisticsAgent");

                    b.Property<string>("AssociatedOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AssociatedOrganizationId");

                    b.HasDiscriminator().HasValue("Actor");
                });

            modelBuilder.Entity("Tracking.Data.Model.Organization", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.LogisticsAgent");

                    b.Property<string>("AccessDelegationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AccessDelegationId");

                    b.HasIndex("ParentOrganizationId");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("Tracking.Data.Model.PieceDg", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Piece");

                    b.Property<bool>("AllPackedInOneIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("DgDeclarationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OverpackCriticalitySafetyIndexNumeric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OverpackIndicator")
                        .HasColumnType("bit");

                    b.Property<bool>("OverpackT1")
                        .HasColumnType("bit");

                    b.Property<bool>("OverpackTypeCode")
                        .HasColumnType("bit");

                    b.Property<double>("QValueNumeric")
                        .HasColumnType("float");

                    b.HasIndex("DgDeclarationId");

                    b.HasDiscriminator().HasValue("PieceDg");
                });

            modelBuilder.Entity("Tracking.Data.Model.PieceLiveAnimals", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Piece");

                    b.Property<DateTime>("AcquisitionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AnnualQuotaQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpermitConsignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExportTradeCountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoodsTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsTypeExtensionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OriginReferencePermitDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginReferencePermitId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginReferencePermitTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginTradeCountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuantityAnimals")
                        .HasColumnType("int");

                    b.Property<string>("SpeciesCommonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeciesScientificName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecimenDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecimenTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("EpermitConsignmentId")
                        .IsUnique()
                        .HasFilter("[EpermitConsignmentId] IS NOT NULL");

                    b.HasIndex("ExportTradeCountryId");

                    b.HasIndex("OriginTradeCountryId");

                    b.HasDiscriminator().HasValue("PieceLiveAnimals");
                });

            modelBuilder.Entity("Tracking.Data.Model.ProductDg", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Product");

                    b.Property<string>("AdditionalHazardClassificationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DgProductRadioactiveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExplosiveCompatibilityGroupCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HazardClassificationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackagingDangerLevelCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackingInstructionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProperShippingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialProvisionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DgProductRadioactiveId")
                        .IsUnique()
                        .HasFilter("[DgProductRadioactiveId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ProductDg");
                });

            modelBuilder.Entity("Tracking.Data.Model.NonHumanActor", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Actor");

                    b.HasDiscriminator().HasValue("NonHumanActor");
                });

            modelBuilder.Entity("Tracking.Data.Model.Person", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Actor");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComposingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Salutation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoringId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitCompositionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("BookingId");

                    b.HasIndex("CheckId");

                    b.HasIndex("ComposingId");

                    b.HasIndex("LoadingActivityId");

                    b.HasIndex("LoadingId");

                    b.HasIndex("MovingId");

                    b.HasIndex("StorageId");

                    b.HasIndex("StoringId");

                    b.HasIndex("TransportMovementId");

                    b.HasIndex("UnitCompositionId");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Tracking.Data.Model.Company", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Organization");

                    b.Property<string>("AgentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentLocationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Tracking.Data.Model.PublicAuthority", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Organization");

                    b.HasDiscriminator().HasValue("PublicAuthority");
                });

            modelBuilder.Entity("Tracking.Data.Model.Carrier", b =>
                {
                    b.HasBaseType("Tracking.Data.Model.Company");

                    b.Property<string>("AirlineCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Carrier");
                });

            modelBuilder.Entity("CheckExternalReference", b =>
                {
                    b.HasOne("Tracking.Data.Model.Check", null)
                        .WithMany()
                        .HasForeignKey("ChecksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracking.Data.Model.ExternalReference", null)
                        .WithMany()
                        .HasForeignKey("ExternalReferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PieceProduct", b =>
                {
                    b.HasOne("Tracking.Data.Model.Product", null)
                        .WithMany()
                        .HasForeignKey("ContentDescribedByProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracking.Data.Model.Piece", null)
                        .WithMany()
                        .HasForeignKey("DescriptionForContentOfPiecesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PriceRatings", b =>
                {
                    b.HasOne("Tracking.Data.Model.Price", null)
                        .WithMany()
                        .HasForeignKey("ForPricesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracking.Data.Model.Ratings", null)
                        .WithMany()
                        .HasForeignKey("RatingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tracking.Data.Model.AccessPermissions", b =>
                {
                    b.HasOne("Tracking.Data.Model.LogisticsAgent", "HasLogisticsAgent")
                        .WithMany()
                        .HasForeignKey("HasLogisticsAgentId");

                    b.Navigation("HasLogisticsAgent");
                });

            modelBuilder.Entity("Tracking.Data.Model.ActivitySequence", b =>
                {
                    b.HasOne("Tracking.Data.Model.Booking", null)
                        .WithMany("ActivitySequences")
                        .HasForeignKey("BookingId");
                });

            modelBuilder.Entity("Tracking.Data.Model.Address", b =>
                {
                    b.HasOne("Tracking.Data.Model.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Tracking.Data.Model.Adjustments", b =>
                {
                    b.HasOne("Tracking.Data.Model.BillingDetails", null)
                        .WithMany("Adjustments")
                        .HasForeignKey("BillingDetailsId");
                });

            modelBuilder.Entity("Tracking.Data.Model.Answer", b =>
                {
                    b.HasOne("Tracking.Data.Model.Actor", "AnswerActor")
                        .WithMany()
                        .HasForeignKey("AnswerActorId");

                    b.HasOne("Tracking.Data.Model.Value", "AnswerValue")
                        .WithMany()
                        .HasForeignKey("AnswerValueId");

                    b.HasOne("Tracking.Data.Model.Location", "GivenAtLocation")
                        .WithMany()
                        .HasForeignKey("GivenAtLocationId");

                    b.Navigation("AnswerActor");

                    b.Navigation("AnswerValue");

                    b.Navigation("GivenAtLocation");
                });

            modelBuilder.Entity("Tracking.Data.Model.BillingDetails", b =>
                {
                    b.HasOne("Tracking.Data.Model.Value", "TaxDueAgent")
                        .WithMany()
                        .HasForeignKey("TaxDueAgentId");

                    b.HasOne("Tracking.Data.Model.Value", "TaxDueAirline")
                        .WithMany()
                        .HasForeignKey("TaxDueAirlineId");

                    b.Navigation("TaxDueAgent");

                    b.Navigation("TaxDueAirline");
                });

            modelBuilder.Entity("Tracking.Data.Model.Booking", b =>
                {
                    b.HasOne("Tracking.Data.Model.BookingRequest", "ForBookingRequest")
                        .WithOne("Booking")
                        .HasForeignKey("Tracking.Data.Model.Booking", "BookingRequestId");

                    b.Navigation("ForBookingRequest");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingOption", b =>
                {
                    b.HasOne("Tracking.Data.Model.BookingRequest", "ForBookingRequest")
                        .WithOne("BookingOption")
                        .HasForeignKey("Tracking.Data.Model.BookingOption", "BookingRequestId");

                    b.HasOne("Tracking.Data.Model.CarrierProduct", "CarrierProductInfo")
                        .WithMany()
                        .HasForeignKey("CarrierProductInfoId");

                    b.HasOne("Tracking.Data.Model.Carrier", "FromCarrier")
                        .WithMany()
                        .HasForeignKey("FromCarrierId");

                    b.HasOne("Tracking.Data.Model.BookingOptionRequest", "RequestRef")
                        .WithMany("BookingOption")
                        .HasForeignKey("RequestRefId");

                    b.HasOne("Tracking.Data.Model.TransportMovement", "TransportMovement")
                        .WithMany()
                        .HasForeignKey("TransportMovementId");

                    b.Navigation("CarrierProductInfo");

                    b.Navigation("ForBookingRequest");

                    b.Navigation("FromCarrier");

                    b.Navigation("RequestRef");

                    b.Navigation("TransportMovement");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingOptionRequest", b =>
                {
                    b.HasOne("Tracking.Data.Model.BookingShipment", "BookingShipmentDetails")
                        .WithMany("BookingOptionRequest")
                        .HasForeignKey("BookingShipmentDetailsId");

                    b.HasOne("Tracking.Data.Model.Ratings", "RatingsPreference")
                        .WithMany("PreferenceOfRequests")
                        .HasForeignKey("RatingsPreferenceId");

                    b.HasOne("Tracking.Data.Model.Shipment", "ShipmentDetails")
                        .WithMany()
                        .HasForeignKey("ShipmentDetailsId");

                    b.HasOne("Tracking.Data.Model.TransportMovement", "TransportMovement")
                        .WithMany()
                        .HasForeignKey("TransportMovementId");

                    b.HasOne("Tracking.Data.Model.Value", "UnitsPreference")
                        .WithMany()
                        .HasForeignKey("UnitsPreferenceId");

                    b.Navigation("BookingShipmentDetails");

                    b.Navigation("RatingsPreference");

                    b.Navigation("ShipmentDetails");

                    b.Navigation("TransportMovement");

                    b.Navigation("UnitsPreference");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingShipment", b =>
                {
                    b.HasOne("Tracking.Data.Model.Dimensions", "TotalDimensions")
                        .WithMany()
                        .HasForeignKey("TotalDimensionsId");

                    b.HasOne("Tracking.Data.Model.Value", "TotalGrossWeight")
                        .WithMany()
                        .HasForeignKey("TotalGrossWeightId");

                    b.HasOne("Tracking.Data.Model.VolumetricWeight", "TotalVolumetricWeight")
                        .WithMany()
                        .HasForeignKey("TotalVolumetricWeightId");

                    b.Navigation("TotalDimensions");

                    b.Navigation("TotalGrossWeight");

                    b.Navigation("TotalVolumetricWeight");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingTimes", b =>
                {
                    b.HasOne("Tracking.Data.Model.BookingOption", "ForBookingOptions")
                        .WithOne("BookingTimes")
                        .HasForeignKey("Tracking.Data.Model.BookingTimes", "BookingOptionId");

                    b.HasOne("Tracking.Data.Model.BookingOptionRequest", "ForBookingOptionRequest")
                        .WithOne("TimePreferences")
                        .HasForeignKey("Tracking.Data.Model.BookingTimes", "BookingOptionRequestId");

                    b.Navigation("ForBookingOptionRequest");

                    b.Navigation("ForBookingOptions");
                });

            modelBuilder.Entity("Tracking.Data.Model.Characteristic", b =>
                {
                    b.HasOne("Tracking.Data.Model.Product", "OfProduct")
                        .WithMany("OtherCharacteristics")
                        .HasForeignKey("OfProductId");

                    b.Navigation("OfProduct");
                });

            modelBuilder.Entity("Tracking.Data.Model.Check", b =>
                {
                    b.HasOne("Tracking.Data.Model.Answer", null)
                        .WithMany("Checks")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Tracking.Data.Model.BillingDetails", null)
                        .WithMany("Checks")
                        .HasForeignKey("BillingDetailsId");

                    b.HasOne("Tracking.Data.Model.Booking", null)
                        .WithMany("Checks")
                        .HasForeignKey("BookingId");

                    b.HasOne("Tracking.Data.Model.BookingOption", null)
                        .WithMany("Checks")
                        .HasForeignKey("BookingOptionId");

                    b.HasOne("Tracking.Data.Model.BookingOptionRequest", null)
                        .WithMany("Checks")
                        .HasForeignKey("BookingOptionRequestId");

                    b.HasOne("Tracking.Data.Model.BookingRequest", null)
                        .WithMany("Checks")
                        .HasForeignKey("BookingRequestId");

                    b.HasOne("Tracking.Data.Model.BookingShipment", null)
                        .WithMany("Checks")
                        .HasForeignKey("BookingShipmentId");

                    b.HasOne("Tracking.Data.Model.Check", null)
                        .WithMany("Checks")
                        .HasForeignKey("CheckId");

                    b.HasOne("Tracking.Data.Model.CheckTotalResult", "CheckTotalResult")
                        .WithMany("Checks")
                        .HasForeignKey("CheckTotalResultId");

                    b.HasOne("Tracking.Data.Model.Actor", "Checker")
                        .WithMany("Checks")
                        .HasForeignKey("CheckerId");

                    b.HasOne("Tracking.Data.Model.Co2Emissions", null)
                        .WithMany("Checks")
                        .HasForeignKey("Co2EmissionsId");

                    b.HasOne("Tracking.Data.Model.Composing", null)
                        .WithMany("Checks")
                        .HasForeignKey("ComposingId");

                    b.HasOne("Tracking.Data.Model.CustomsInformation", null)
                        .WithMany("Checks")
                        .HasForeignKey("CustomsInformationId");

                    b.HasOne("Tracking.Data.Model.DgDeclaration", null)
                        .WithMany("Checks")
                        .HasForeignKey("DgDeclarationId");

                    b.HasOne("Tracking.Data.Model.DgProductRadioactive", null)
                        .WithMany("Checks")
                        .HasForeignKey("DgProductRadioactiveId");

                    b.HasOne("Tracking.Data.Model.DgRadioactiveIsotope", null)
                        .WithMany("Checks")
                        .HasForeignKey("DgRadioactiveIsotopeId");

                    b.HasOne("Tracking.Data.Model.EpermitConsignment", null)
                        .WithMany("Checks")
                        .HasForeignKey("EpermitConsignmentId");

                    b.HasOne("Tracking.Data.Model.EpermitSignature", null)
                        .WithMany("Checks")
                        .HasForeignKey("EpermitSignatureId");

                    b.HasOne("Tracking.Data.Model.Insurance", null)
                        .WithMany("Checks")
                        .HasForeignKey("InsuranceId");

                    b.HasOne("Tracking.Data.Model.IotDevice", null)
                        .WithMany("Checks")
                        .HasForeignKey("IotDeviceId");

                    b.HasOne("Tracking.Data.Model.Item", null)
                        .WithMany("Checks")
                        .HasForeignKey("ItemId");

                    b.HasOne("Tracking.Data.Model.LiveAnimalsEpermit", null)
                        .WithMany("Checks")
                        .HasForeignKey("LiveAnimalsEpermitId");

                    b.HasOne("Tracking.Data.Model.LoadingActivity", null)
                        .WithMany("Checks")
                        .HasForeignKey("LoadingActivityId");

                    b.HasOne("Tracking.Data.Model.Loading", null)
                        .WithMany("Checks")
                        .HasForeignKey("LoadingId");

                    b.HasOne("Tracking.Data.Model.LoadingMaterial", null)
                        .WithMany("Checks")
                        .HasForeignKey("LoadingMaterialId");

                    b.HasOne("Tracking.Data.Model.LoadingUnit", null)
                        .WithMany("Checks")
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Tracking.Data.Model.Location", "LocationOfPerformance")
                        .WithMany("Checks")
                        .HasForeignKey("LocationOfPerformanceId");

                    b.HasOne("Tracking.Data.Model.Moving", null)
                        .WithMany("Checks")
                        .HasForeignKey("MovingId");

                    b.HasOne("Tracking.Data.Model.Organization", null)
                        .WithMany("Checks")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Tracking.Data.Model.PackagingType", null)
                        .WithMany("Checks")
                        .HasForeignKey("PackagingTypeId");

                    b.HasOne("Tracking.Data.Model.Piece", null)
                        .WithMany("Checks")
                        .HasForeignKey("PieceId");

                    b.HasOne("Tracking.Data.Model.Price", null)
                        .WithMany("Checks")
                        .HasForeignKey("PriceId");

                    b.HasOne("Tracking.Data.Model.Product", null)
                        .WithMany("Checks")
                        .HasForeignKey("ProductId");

                    b.HasOne("Tracking.Data.Model.Question", null)
                        .WithMany("Checks")
                        .HasForeignKey("QuestionId");

                    b.HasOne("Tracking.Data.Model.Ratings", null)
                        .WithMany("Checks")
                        .HasForeignKey("RatingsId");

                    b.HasOne("Tracking.Data.Model.Routing", null)
                        .WithMany("Checks")
                        .HasForeignKey("RoutingId");

                    b.HasOne("Tracking.Data.Model.SecurityDeclaration", null)
                        .WithMany("Checks")
                        .HasForeignKey("SecurityDeclarationId");

                    b.HasOne("Tracking.Data.Model.Sensor", null)
                        .WithMany("Checks")
                        .HasForeignKey("SensorId");

                    b.HasOne("Tracking.Data.Model.Shipment", null)
                        .WithMany("Checks")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("Tracking.Data.Model.Storage", null)
                        .WithMany("Checks")
                        .HasForeignKey("StorageId");

                    b.HasOne("Tracking.Data.Model.Storing", null)
                        .WithMany("Checks")
                        .HasForeignKey("StoringId");

                    b.HasOne("Tracking.Data.Model.TransportLegs", null)
                        .WithMany("Checks")
                        .HasForeignKey("TransportLegsId");

                    b.HasOne("Tracking.Data.Model.TransportMeans", null)
                        .WithMany("Checks")
                        .HasForeignKey("TransportMeansId");

                    b.HasOne("Tracking.Data.Model.TransportMovement", null)
                        .WithMany("Checks")
                        .HasForeignKey("TransportMovementId");

                    b.HasOne("Tracking.Data.Model.UnitComposition", null)
                        .WithMany("Checks")
                        .HasForeignKey("UnitCompositionId");

                    b.HasOne("Tracking.Data.Model.CheckTemplate", "UsedTemplate")
                        .WithMany("Checks")
                        .HasForeignKey("UsedTemplateId");

                    b.HasOne("Tracking.Data.Model.Waybill", null)
                        .WithMany("Checks")
                        .HasForeignKey("WaybillId");

                    b.Navigation("CheckTotalResult");

                    b.Navigation("Checker");

                    b.Navigation("LocationOfPerformance");

                    b.Navigation("UsedTemplate");
                });

            modelBuilder.Entity("Tracking.Data.Model.CheckTemplate", b =>
                {
                    b.HasOne("Tracking.Data.Model.ExternalReference", "LegacyTemplate")
                        .WithMany()
                        .HasForeignKey("LegacyTemplateId");

                    b.Navigation("LegacyTemplate");
                });

            modelBuilder.Entity("Tracking.Data.Model.CheckTotalResult", b =>
                {
                    b.HasOne("Tracking.Data.Model.Person", "CertifiedByActor")
                        .WithMany()
                        .HasForeignKey("CertifiedByActorId");

                    b.HasOne("Tracking.Data.Model.Value", "ResultValue")
                        .WithMany()
                        .HasForeignKey("ResultValueId");

                    b.Navigation("CertifiedByActor");

                    b.Navigation("ResultValue");
                });

            modelBuilder.Entity("Tracking.Data.Model.Co2Emissions", b =>
                {
                    b.HasOne("Tracking.Data.Model.Value", "CalculatedEmissions")
                        .WithMany()
                        .HasForeignKey("CalculatedEmissionsId");

                    b.HasOne("Tracking.Data.Model.TransportMovement", "CalculationForTransportMovement")
                        .WithMany("Co2Emissions")
                        .HasForeignKey("CalculationForTransportMovementId");

                    b.Navigation("CalculatedEmissions");

                    b.Navigation("CalculationForTransportMovement");
                });

            modelBuilder.Entity("Tracking.Data.Model.Composing", b =>
                {
                    b.HasOne("Tracking.Data.Model.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Tracking.Data.Model.Location", "LocationOfPerformance")
                        .WithMany()
                        .HasForeignKey("LocationOfPerformanceId");

                    b.HasOne("Tracking.Data.Model.UnitComposition", null)
                        .WithMany("CompositionActions")
                        .HasForeignKey("UnitCompositionId");

                    b.Navigation("LoadingUnit");

                    b.Navigation("LocationOfPerformance");
                });

            modelBuilder.Entity("Tracking.Data.Model.ContactDetail", b =>
                {
                    b.HasOne("Tracking.Data.Model.Booking", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("BookingId");

                    b.HasOne("Tracking.Data.Model.Check", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("CheckId");

                    b.HasOne("Tracking.Data.Model.Composing", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("ComposingId");

                    b.HasOne("Tracking.Data.Model.LoadingActivity", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("LoadingActivityId");

                    b.HasOne("Tracking.Data.Model.Loading", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("LoadingId");

                    b.HasOne("Tracking.Data.Model.Moving", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("MovingId");

                    b.HasOne("Tracking.Data.Model.Person", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("PersonId");

                    b.HasOne("Tracking.Data.Model.Storage", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("StorageId");

                    b.HasOne("Tracking.Data.Model.Storing", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("StoringId");

                    b.HasOne("Tracking.Data.Model.TransportMovement", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("TransportMovementId");

                    b.HasOne("Tracking.Data.Model.UnitComposition", null)
                        .WithMany("ContactDetails")
                        .HasForeignKey("UnitCompositionId");
                });

            modelBuilder.Entity("Tracking.Data.Model.CustomsInformation", b =>
                {
                    b.HasOne("Tracking.Data.Model.Piece", "IssuedForPiece")
                        .WithMany("CustomsInformation")
                        .HasForeignKey("IssuedForPieceId");

                    b.Navigation("IssuedForPiece");
                });

            modelBuilder.Entity("Tracking.Data.Model.DgDeclaration", b =>
                {
                    b.HasOne("Tracking.Data.Model.Piece", "IssuedForPiece")
                        .WithMany()
                        .HasForeignKey("IssuedForPieceId");

                    b.Navigation("IssuedForPiece");
                });

            modelBuilder.Entity("Tracking.Data.Model.DgRadioactiveIsotope", b =>
                {
                    b.HasOne("Tracking.Data.Model.DgProductRadioactive", "ContentOfDgProductRadioactive")
                        .WithMany("Isotopes")
                        .HasForeignKey("ContentOfDgProductRadioactiveId");

                    b.Navigation("ContentOfDgProductRadioactive");
                });

            modelBuilder.Entity("Tracking.Data.Model.Dimensions", b =>
                {
                    b.HasOne("Tracking.Data.Model.Value", "Height")
                        .WithMany()
                        .HasForeignKey("HeightId");

                    b.HasOne("Tracking.Data.Model.Value", "Length")
                        .WithMany()
                        .HasForeignKey("LengthId");

                    b.HasOne("Tracking.Data.Model.Shipment", null)
                        .WithMany("TotalDimensions")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("Tracking.Data.Model.Value", "Volume")
                        .WithMany()
                        .HasForeignKey("VolumeId");

                    b.HasOne("Tracking.Data.Model.Value", "Width")
                        .WithMany()
                        .HasForeignKey("WidthId");

                    b.Navigation("Height");

                    b.Navigation("Length");

                    b.Navigation("Volume");

                    b.Navigation("Width");
                });

            modelBuilder.Entity("Tracking.Data.Model.EpermitConsignment", b =>
                {
                    b.HasOne("Tracking.Data.Model.Value", "ExaminingQuantity")
                        .WithMany()
                        .HasForeignKey("ExaminingQuantityId");

                    b.HasOne("Tracking.Data.Model.LiveAnimalsEpermit", "Permit")
                        .WithMany("Consignments")
                        .HasForeignKey("PermitId");

                    b.Navigation("ExaminingQuantity");

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("Tracking.Data.Model.EpermitSignature", b =>
                {
                    b.HasOne("Tracking.Data.Model.LiveAnimalsEpermit", "ForEpermit")
                        .WithMany("Signatures")
                        .HasForeignKey("ForEpermitId");

                    b.HasOne("Tracking.Data.Model.Company", "SignatoryCompany")
                        .WithMany()
                        .HasForeignKey("SignatoryCompanyId");

                    b.Navigation("ForEpermit");

                    b.Navigation("SignatoryCompany");
                });

            modelBuilder.Entity("Tracking.Data.Model.ErrorDetail", b =>
                {
                    b.HasOne("Tracking.Data.Model.Error", null)
                        .WithMany("HasErrorDetail")
                        .HasForeignKey("ErrorId");
                });

            modelBuilder.Entity("Tracking.Data.Model.ExternalReference", b =>
                {
                    b.HasOne("Tracking.Data.Model.Actor", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("ActorId");

                    b.HasOne("Tracking.Data.Model.Answer", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Tracking.Data.Model.BillingDetails", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("BillingDetailsId");

                    b.HasOne("Tracking.Data.Model.Booking", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("BookingId");

                    b.HasOne("Tracking.Data.Model.BookingOption", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("BookingOptionId");

                    b.HasOne("Tracking.Data.Model.BookingOptionRequest", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("BookingOptionRequestId");

                    b.HasOne("Tracking.Data.Model.BookingRequest", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("BookingRequestId");

                    b.HasOne("Tracking.Data.Model.BookingShipment", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("BookingShipmentId");

                    b.HasOne("Tracking.Data.Model.CheckTemplate", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("CheckTemplateId");

                    b.HasOne("Tracking.Data.Model.CheckTotalResult", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("CheckTotalResultId");

                    b.HasOne("Tracking.Data.Model.Co2Emissions", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("Co2EmissionsId");

                    b.HasOne("Tracking.Data.Model.Composing", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("ComposingId");

                    b.HasOne("Tracking.Data.Model.CustomsInformation", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("CustomsInformationId");

                    b.HasOne("Tracking.Data.Model.DgDeclaration", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("DgDeclarationId");

                    b.HasOne("Tracking.Data.Model.DgProductRadioactive", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("DgProductRadioactiveId");

                    b.HasOne("Tracking.Data.Model.DgRadioactiveIsotope", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("DgRadioactiveIsotopeId");

                    b.HasOne("Tracking.Data.Model.EpermitConsignment", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("EpermitConsignmentId");

                    b.HasOne("Tracking.Data.Model.EpermitSignature", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("EpermitSignatureId");

                    b.HasOne("Tracking.Data.Model.ExternalReference", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("ExternalReferenceId");

                    b.HasOne("Tracking.Data.Model.Insurance", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("InsuranceId");

                    b.HasOne("Tracking.Data.Model.IotDevice", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("IotDeviceId");

                    b.HasOne("Tracking.Data.Model.Item", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("ItemId");

                    b.HasOne("Tracking.Data.Model.LiveAnimalsEpermit", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("LiveAnimalsEpermitId");

                    b.HasOne("Tracking.Data.Model.LoadingActivity", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("LoadingActivityId");

                    b.HasOne("Tracking.Data.Model.Loading", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("LoadingId");

                    b.HasOne("Tracking.Data.Model.LoadingMaterial", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("LoadingMaterialId");

                    b.HasOne("Tracking.Data.Model.LoadingUnit", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Tracking.Data.Model.Location", "LocationOfCreation")
                        .WithMany("ExternalReferences")
                        .HasForeignKey("LocationOfCreationId");

                    b.HasOne("Tracking.Data.Model.Moving", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("MovingId");

                    b.HasOne("Tracking.Data.Model.Company", "Originator")
                        .WithMany("ExternalReferences")
                        .HasForeignKey("OriginatorId");

                    b.HasOne("Tracking.Data.Model.PackagingType", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("PackagingTypeId");

                    b.HasOne("Tracking.Data.Model.Person", null)
                        .WithMany("Documents")
                        .HasForeignKey("PersonId");

                    b.HasOne("Tracking.Data.Model.Piece", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("PieceId");

                    b.HasOne("Tracking.Data.Model.Price", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("PriceId");

                    b.HasOne("Tracking.Data.Model.Product", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("ProductId");

                    b.HasOne("Tracking.Data.Model.PublicAuthority", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("PublicAuthorityId");

                    b.HasOne("Tracking.Data.Model.Question", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("QuestionId");

                    b.HasOne("Tracking.Data.Model.Ratings", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("RatingsId");

                    b.HasOne("Tracking.Data.Model.Routing", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("RoutingId");

                    b.HasOne("Tracking.Data.Model.SecurityDeclaration", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("SecurityDeclarationId");

                    b.HasOne("Tracking.Data.Model.Sensor", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("SensorId");

                    b.HasOne("Tracking.Data.Model.Shipment", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("Tracking.Data.Model.Storage", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("StorageId");

                    b.HasOne("Tracking.Data.Model.Storing", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("StoringId");

                    b.HasOne("Tracking.Data.Model.TransportLegs", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("TransportLegsId");

                    b.HasOne("Tracking.Data.Model.TransportMeans", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("TransportMeansId");

                    b.HasOne("Tracking.Data.Model.TransportMovement", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("TransportMovementId");

                    b.HasOne("Tracking.Data.Model.UnitComposition", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("UnitCompositionId");

                    b.HasOne("Tracking.Data.Model.Waybill", null)
                        .WithMany("ExternalReferences")
                        .HasForeignKey("WaybillId");

                    b.Navigation("LocationOfCreation");

                    b.Navigation("Originator");
                });

            modelBuilder.Entity("Tracking.Data.Model.Geolocation", b =>
                {
                    b.HasOne("Tracking.Data.Model.Value", "Elevation")
                        .WithMany()
                        .HasForeignKey("ElevationId");

                    b.Navigation("Elevation");
                });

            modelBuilder.Entity("Tracking.Data.Model.Insurance", b =>
                {
                    b.HasOne("Tracking.Data.Model.Organization", "CoveringOrganization")
                        .WithMany()
                        .HasForeignKey("CoveringOrganizationId");

                    b.HasOne("Tracking.Data.Model.Value", "InsuredAmount")
                        .WithMany()
                        .HasForeignKey("InsuredAmountId");

                    b.HasOne("Tracking.Data.Model.Shipment", "InsuredShipment")
                        .WithOne("Insurance")
                        .HasForeignKey("Tracking.Data.Model.Insurance", "ShipmentId");

                    b.Navigation("CoveringOrganization");

                    b.Navigation("InsuredAmount");

                    b.Navigation("InsuredShipment");
                });

            modelBuilder.Entity("Tracking.Data.Model.IotDevice", b =>
                {
                    b.HasOne("Tracking.Data.Model.IotDevice", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("IotDeviceId");

                    b.HasOne("Tracking.Data.Model.Item", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("ItemId");

                    b.HasOne("Tracking.Data.Model.LoadingMaterial", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("LoadingMaterialId");

                    b.HasOne("Tracking.Data.Model.LoadingUnit", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Tracking.Data.Model.Location", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("LocationId");

                    b.HasOne("Tracking.Data.Model.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Tracking.Data.Model.Piece", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("PieceId");

                    b.HasOne("Tracking.Data.Model.Sensor", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("SensorId");

                    b.HasOne("Tracking.Data.Model.Shipment", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("Tracking.Data.Model.TransportMeans", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("TransportMeansId");

                    b.HasOne("Tracking.Data.Model.Organization", "TransportOrganization")
                        .WithMany()
                        .HasForeignKey("TransportOrganizationId");

                    b.Navigation("Manufacturer");

                    b.Navigation("TransportOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.Item", b =>
                {
                    b.HasOne("Tracking.Data.Model.Piece", "ContainedItemInPiece")
                        .WithMany("ContainedItems")
                        .HasForeignKey("ContainedItemInPieceId");

                    b.HasOne("Tracking.Data.Model.Product", "DescribedByProduct")
                        .WithMany("DescriptionForItems")
                        .HasForeignKey("DescribedByProductId");

                    b.HasOne("Tracking.Data.Model.Dimensions", "Dimensions")
                        .WithMany()
                        .HasForeignKey("DimensionsId");

                    b.HasOne("Tracking.Data.Model.Value", "ItemQuantity")
                        .WithMany()
                        .HasForeignKey("ItemQuantityId");

                    b.HasOne("Tracking.Data.Model.Country", "ProductionCountry")
                        .WithMany()
                        .HasForeignKey("ProductionCountryId");

                    b.HasOne("Tracking.Data.Model.Country", "TargetCountry")
                        .WithMany()
                        .HasForeignKey("TargetCountryId");

                    b.HasOne("Tracking.Data.Model.Organization", "TransportOrganization")
                        .WithMany()
                        .HasForeignKey("TransportOrganizationId");

                    b.HasOne("Tracking.Data.Model.Value", "UnitPrice")
                        .WithMany()
                        .HasForeignKey("UnitPriceId");

                    b.HasOne("Tracking.Data.Model.Value", "Weight")
                        .WithMany()
                        .HasForeignKey("WeightId");

                    b.Navigation("ContainedItemInPiece");

                    b.Navigation("DescribedByProduct");

                    b.Navigation("Dimensions");

                    b.Navigation("ItemQuantity");

                    b.Navigation("ProductionCountry");

                    b.Navigation("TargetCountry");

                    b.Navigation("TransportOrganization");

                    b.Navigation("UnitPrice");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("Tracking.Data.Model.LiveAnimalsEpermit", b =>
                {
                    b.HasOne("Tracking.Data.Model.Company", "Consignee")
                        .WithMany()
                        .HasForeignKey("ConsigneeId");

                    b.Navigation("Consignee");
                });

            modelBuilder.Entity("Tracking.Data.Model.Loading", b =>
                {
                    b.HasOne("Tracking.Data.Model.LoadingActivity", null)
                        .WithMany("LoadingActions")
                        .HasForeignKey("LoadingActivityId");

                    b.HasOne("Tracking.Data.Model.Location", "LocationOfPerformance")
                        .WithMany()
                        .HasForeignKey("LocationOfPerformanceId");

                    b.HasOne("Tracking.Data.Model.TransportMeans", "OnTransportMeans")
                        .WithMany()
                        .HasForeignKey("OnTransportMeansId");

                    b.Navigation("LocationOfPerformance");

                    b.Navigation("OnTransportMeans");
                });

            modelBuilder.Entity("Tracking.Data.Model.LoadingMaterial", b =>
                {
                    b.HasOne("Tracking.Data.Model.Composing", null)
                        .WithMany("ComposedMaterials")
                        .HasForeignKey("ComposingId");

                    b.HasOne("Tracking.Data.Model.Loading", null)
                        .WithMany("LoadedMaterials")
                        .HasForeignKey("LoadingId");

                    b.HasOne("Tracking.Data.Model.Organization", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Tracking.Data.Model.Organization", "TransportOrganization")
                        .WithMany()
                        .HasForeignKey("TransportOrganizationId");

                    b.Navigation("Manufacturer");

                    b.Navigation("TransportOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.LoadingUnit", b =>
                {
                    b.HasOne("Tracking.Data.Model.Loading", null)
                        .WithMany("LoadedUnits")
                        .HasForeignKey("LoadingId");

                    b.HasOne("Tracking.Data.Model.Value", "TareWeight")
                        .WithMany()
                        .HasForeignKey("TareWeightId");

                    b.HasOne("Tracking.Data.Model.Organization", "TransportOrganization")
                        .WithMany()
                        .HasForeignKey("TransportOrganizationId");

                    b.Navigation("TareWeight");

                    b.Navigation("TransportOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.Location", b =>
                {
                    b.HasOne("Tracking.Data.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Tracking.Data.Model.Geolocation", "Geolocation")
                        .WithMany()
                        .HasForeignKey("GeolocationId");

                    b.HasOne("Tracking.Data.Model.Organization", "TransportOrganization")
                        .WithOne("BasedAtLocation")
                        .HasForeignKey("Tracking.Data.Model.Location", "OrganizationId");

                    b.HasOne("Tracking.Data.Model.Routing", null)
                        .WithMany("ExcludedViaPoints")
                        .HasForeignKey("RoutingId");

                    b.Navigation("Address");

                    b.Navigation("Geolocation");

                    b.Navigation("TransportOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.Measurement", b =>
                {
                    b.HasOne("Tracking.Data.Model.Value", "MeasurementValue")
                        .WithMany()
                        .HasForeignKey("MeasurementValueId");

                    b.HasOne("Tracking.Data.Model.Geolocation", "RecordedGeolocation")
                        .WithMany()
                        .HasForeignKey("RecordedGeolocationId");

                    b.HasOne("Tracking.Data.Model.Sensor", null)
                        .WithMany("Measurements")
                        .HasForeignKey("SensorId");

                    b.Navigation("MeasurementValue");

                    b.Navigation("RecordedGeolocation");
                });

            modelBuilder.Entity("Tracking.Data.Model.MovementTimes", b =>
                {
                    b.HasOne("Tracking.Data.Model.TransportMovement", null)
                        .WithMany("MovementTimes")
                        .HasForeignKey("TransportMovementId");
                });

            modelBuilder.Entity("Tracking.Data.Model.Moving", b =>
                {
                    b.HasOne("Tracking.Data.Model.Location", "LocationOfPerformance")
                        .WithMany()
                        .HasForeignKey("LocationOfPerformanceId");

                    b.Navigation("LocationOfPerformance");
                });

            modelBuilder.Entity("Tracking.Data.Model.Operation", b =>
                {
                    b.HasOne("Tracking.Data.Model.PatchOperation", "PatchOperation")
                        .WithMany()
                        .HasForeignKey("PatchOperationId");

                    b.Navigation("PatchOperation");
                });

            modelBuilder.Entity("Tracking.Data.Model.OperationObject", b =>
                {
                    b.HasOne("Tracking.Data.Model.Operation", null)
                        .WithMany("Objects")
                        .HasForeignKey("OperationId");
                });

            modelBuilder.Entity("Tracking.Data.Model.OtherIdentifier", b =>
                {
                    b.HasOne("Tracking.Data.Model.Item", null)
                        .WithMany("OtherIdentifiers")
                        .HasForeignKey("ItemId");

                    b.HasOne("Tracking.Data.Model.LoadingMaterial", null)
                        .WithMany("OtherIdentifiers")
                        .HasForeignKey("LoadingMaterialId");

                    b.HasOne("Tracking.Data.Model.Organization", null)
                        .WithMany("OtherIdentifiers")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Tracking.Data.Model.Party", null)
                        .WithMany("OtherIdentifiers")
                        .HasForeignKey("PartyId");

                    b.HasOne("Tracking.Data.Model.Piece", null)
                        .WithMany("OtherIdentifiers")
                        .HasForeignKey("PieceId");

                    b.HasOne("Tracking.Data.Model.Product", null)
                        .WithMany("OtherIdentifiers")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Tracking.Data.Model.Party", b =>
                {
                    b.HasOne("Tracking.Data.Model.Answer", null)
                        .WithMany("InvolvedParties")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Tracking.Data.Model.BookingOption", null)
                        .WithMany("InvolvedParties")
                        .HasForeignKey("BookingOptionId");

                    b.HasOne("Tracking.Data.Model.CheckTemplate", null)
                        .WithMany("InvolvedParties")
                        .HasForeignKey("CheckTemplateId");

                    b.HasOne("Tracking.Data.Model.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Tracking.Data.Model.Company", "PartyDetails")
                        .WithMany()
                        .HasForeignKey("PartyDetailsId");

                    b.HasOne("Tracking.Data.Model.Piece", null)
                        .WithMany("InvolvedParties")
                        .HasForeignKey("PieceId");

                    b.HasOne("Tracking.Data.Model.Shipment", null)
                        .WithMany("InvolvedParties")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("Tracking.Data.Model.Waybill", null)
                        .WithMany("InvolvedParties")
                        .HasForeignKey("WaybillId");

                    b.Navigation("Organization");

                    b.Navigation("PartyDetails");
                });

            modelBuilder.Entity("Tracking.Data.Model.Permission", b =>
                {
                    b.HasOne("Tracking.Data.Model.AccessDelegation", null)
                        .WithMany("HasPermission")
                        .HasForeignKey("AccessDelegationId");

                    b.HasOne("Tracking.Data.Model.AccessPermissions", null)
                        .WithMany("HasPermission")
                        .HasForeignKey("AccessPermissionsId");
                });

            modelBuilder.Entity("Tracking.Data.Model.Piece", b =>
                {
                    b.HasOne("Tracking.Data.Model.Composing", null)
                        .WithMany("ComposedPieces")
                        .HasForeignKey("ComposingId");

                    b.HasOne("Tracking.Data.Model.Piece", "ContainedPieceInPiece")
                        .WithMany("ContainedPieces")
                        .HasForeignKey("ContainedPieceInPieceId");

                    b.HasOne("Tracking.Data.Model.Country", "ContentProductionCountry")
                        .WithMany()
                        .HasForeignKey("ContentProductionCountryId");

                    b.HasOne("Tracking.Data.Model.Dimensions", "Dimensions")
                        .WithMany()
                        .HasForeignKey("DimensionsId");

                    b.HasOne("Tracking.Data.Model.Value", "GrossWeight")
                        .WithMany()
                        .HasForeignKey("GrossWeightId");

                    b.HasOne("Tracking.Data.Model.Loading", null)
                        .WithMany("LoadedPieces")
                        .HasForeignKey("LoadingId");

                    b.HasOne("Tracking.Data.Model.PackagingType", "PackagingType")
                        .WithMany("AappliedOnPieces")
                        .HasForeignKey("PackagingTypeId");

                    b.HasOne("Tracking.Data.Model.Shipment", "PartOfShipment")
                        .WithMany("ShipmentOfPieces")
                        .HasForeignKey("PartOfShipmentId");

                    b.HasOne("Tracking.Data.Model.Organization", "TransportOrganization")
                        .WithMany()
                        .HasForeignKey("TransportOrganizationId");

                    b.HasOne("Tracking.Data.Model.LoadingUnit", "UldReference")
                        .WithMany("LoadedPiecesOnLoadingUnit")
                        .HasForeignKey("UldReferenceId");

                    b.HasOne("Tracking.Data.Model.VolumetricWeight", "VolumetricWeight")
                        .WithMany()
                        .HasForeignKey("VolumetricWeightId");

                    b.Navigation("ContainedPieceInPiece");

                    b.Navigation("ContentProductionCountry");

                    b.Navigation("Dimensions");

                    b.Navigation("GrossWeight");

                    b.Navigation("PackagingType");

                    b.Navigation("PartOfShipment");

                    b.Navigation("TransportOrganization");

                    b.Navigation("UldReference");

                    b.Navigation("VolumetricWeight");
                });

            modelBuilder.Entity("Tracking.Data.Model.Price", b =>
                {
                    b.HasOne("Tracking.Data.Model.BookingOption", "ForBookingOptions")
                        .WithOne("Price")
                        .HasForeignKey("Tracking.Data.Model.Price", "BookingOptionId");

                    b.HasOne("Tracking.Data.Model.BookingOptionRequest", "ForBookingOptionRequest")
                        .WithMany()
                        .HasForeignKey("ForBookingOptionRequestId");

                    b.Navigation("ForBookingOptionRequest");

                    b.Navigation("ForBookingOptions");
                });

            modelBuilder.Entity("Tracking.Data.Model.Product", b =>
                {
                    b.HasOne("Tracking.Data.Model.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Tracking.Data.Model.Question", b =>
                {
                    b.HasOne("Tracking.Data.Model.Answer", "Answer")
                        .WithOne("Question")
                        .HasForeignKey("Tracking.Data.Model.Question", "AnswerId");

                    b.HasOne("Tracking.Data.Model.CheckTemplate", "CheckTemplate")
                        .WithMany("Questions")
                        .HasForeignKey("CheckTemplateId");

                    b.Navigation("Answer");

                    b.Navigation("CheckTemplate");
                });

            modelBuilder.Entity("Tracking.Data.Model.Ranges", b =>
                {
                    b.HasOne("Tracking.Data.Model.Ratings", null)
                        .WithMany("Ranges")
                        .HasForeignKey("RatingsId");
                });

            modelBuilder.Entity("Tracking.Data.Model.RegulatedEntity", b =>
                {
                    b.HasOne("Tracking.Data.Model.Organization", "OwningOrganization")
                        .WithMany()
                        .HasForeignKey("OwningOrganizationId");

                    b.HasOne("Tracking.Data.Model.SecurityDeclaration", null)
                        .WithMany("OtherRegulatedEntities")
                        .HasForeignKey("SecurityDeclarationId");

                    b.Navigation("OwningOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.Routing", b =>
                {
                    b.HasOne("Tracking.Data.Model.BookingOption", "ForBookingOptions")
                        .WithOne("Routing")
                        .HasForeignKey("Tracking.Data.Model.Routing", "BookingOptionId");

                    b.HasOne("Tracking.Data.Model.BookingOptionRequest", "ForBookingOptionRequest")
                        .WithOne("RoutingPreference")
                        .HasForeignKey("Tracking.Data.Model.Routing", "BookingOptionRequestId");

                    b.Navigation("ForBookingOptionRequest");

                    b.Navigation("ForBookingOptions");
                });

            modelBuilder.Entity("Tracking.Data.Model.ScheduledLegs", b =>
                {
                    b.HasOne("Tracking.Data.Model.Location", "ArrivalLocation")
                        .WithMany()
                        .HasForeignKey("ArrivalLocationId");

                    b.HasOne("Tracking.Data.Model.Location", "DepartureLocation")
                        .WithMany()
                        .HasForeignKey("DepartureLocationId");

                    b.HasOne("Tracking.Data.Model.Routing", null)
                        .WithMany("ScheduledLegs")
                        .HasForeignKey("RoutingId");

                    b.Navigation("ArrivalLocation");

                    b.Navigation("DepartureLocation");
                });

            modelBuilder.Entity("Tracking.Data.Model.SecurityDeclaration", b =>
                {
                    b.HasOne("Tracking.Data.Model.Person", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById");

                    b.HasOne("Tracking.Data.Model.Piece", "IssuedForPiece")
                        .WithOne("SecurityDeclaration")
                        .HasForeignKey("Tracking.Data.Model.SecurityDeclaration", "PieceId");

                    b.HasOne("Tracking.Data.Model.RegulatedEntity", "ReceivedFrom")
                        .WithMany()
                        .HasForeignKey("ReceivedFromId");

                    b.HasOne("Tracking.Data.Model.RegulatedEntity", "RegulatedEntityIssuer")
                        .WithMany()
                        .HasForeignKey("RegulatedEntityIssuerId");

                    b.Navigation("IssuedBy");

                    b.Navigation("IssuedForPiece");

                    b.Navigation("ReceivedFrom");

                    b.Navigation("RegulatedEntityIssuer");
                });

            modelBuilder.Entity("Tracking.Data.Model.Sensor", b =>
                {
                    b.HasOne("Tracking.Data.Model.IotDevice", "PartOfIotDevice")
                        .WithMany("ConnectedSensors")
                        .HasForeignKey("IotDeviceId");

                    b.HasOne("Tracking.Data.Model.Organization", "TransportOrganization")
                        .WithMany()
                        .HasForeignKey("TransportOrganizationId");

                    b.Navigation("PartOfIotDevice");

                    b.Navigation("TransportOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.Shipment", b =>
                {
                    b.HasOne("Tracking.Data.Model.Location", "DeliveryLocation")
                        .WithMany()
                        .HasForeignKey("DeliveryLocationId");

                    b.HasOne("Tracking.Data.Model.Value", "TotalGrossWeight")
                        .WithMany()
                        .HasForeignKey("TotalGrossWeightId");

                    b.HasOne("Tracking.Data.Model.VolumetricWeight", "TotalVolumetricWeight")
                        .WithMany()
                        .HasForeignKey("TotalVolumetricWeightId");

                    b.Navigation("DeliveryLocation");

                    b.Navigation("TotalGrossWeight");

                    b.Navigation("TotalVolumetricWeight");
                });

            modelBuilder.Entity("Tracking.Data.Model.Storing", b =>
                {
                    b.HasOne("Tracking.Data.Model.Location", "LocationOfPerformance")
                        .WithMany()
                        .HasForeignKey("LocationOfPerformanceId");

                    b.HasOne("Tracking.Data.Model.Storage", null)
                        .WithMany("StoringActions")
                        .HasForeignKey("StorageId");

                    b.Navigation("LocationOfPerformance");
                });

            modelBuilder.Entity("Tracking.Data.Model.Subscription", b =>
                {
                    b.HasOne("Tracking.Data.Model.Organization", "HasSubscriber")
                        .WithMany()
                        .HasForeignKey("HasSubscriberId");

                    b.HasOne("Tracking.Data.Model.TopicType", "HasTopicType")
                        .WithMany()
                        .HasForeignKey("HasTopicTypeId");

                    b.Navigation("HasSubscriber");

                    b.Navigation("HasTopicType");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportLegs", b =>
                {
                    b.HasOne("Tracking.Data.Model.Location", "ArrivalLocation")
                        .WithMany()
                        .HasForeignKey("ArrivalLocationId");

                    b.HasOne("Tracking.Data.Model.BookingOption", null)
                        .WithMany("TransportLegs")
                        .HasForeignKey("BookingOptionId");

                    b.HasOne("Tracking.Data.Model.Location", "DepartureLocation")
                        .WithMany()
                        .HasForeignKey("DepartureLocationId");

                    b.Navigation("ArrivalLocation");

                    b.Navigation("DepartureLocation");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportMeans", b =>
                {
                    b.HasOne("Tracking.Data.Model.Company", "TransportOrganization")
                        .WithMany()
                        .HasForeignKey("TransportOrganizationId");

                    b.HasOne("Tracking.Data.Model.Value", "TypicalCo2Coefficient")
                        .WithMany()
                        .HasForeignKey("TypicalCo2CoefficientId");

                    b.HasOne("Tracking.Data.Model.Value", "TypicalFuelConsumption")
                        .WithMany()
                        .HasForeignKey("TypicalFuelConsumptionId");

                    b.Navigation("TransportOrganization");

                    b.Navigation("TypicalCo2Coefficient");

                    b.Navigation("TypicalFuelConsumption");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportMovement", b =>
                {
                    b.HasOne("Tracking.Data.Model.Location", "ArrivalLocation")
                        .WithMany()
                        .HasForeignKey("ArrivalLocationId");

                    b.HasOne("Tracking.Data.Model.Location", "DepartureLocation")
                        .WithMany()
                        .HasForeignKey("DepartureLocationId");

                    b.HasOne("Tracking.Data.Model.Value", "DistanceCalculated")
                        .WithMany()
                        .HasForeignKey("DistanceCalculatedId");

                    b.HasOne("Tracking.Data.Model.Value", "DistanceMeasured")
                        .WithMany()
                        .HasForeignKey("DistanceMeasuredId");

                    b.HasOne("Tracking.Data.Model.Value", "FuelAmountCalculated")
                        .WithMany()
                        .HasForeignKey("FuelAmountCalculatedId");

                    b.HasOne("Tracking.Data.Model.Value", "FuelAmountMeasured")
                        .WithMany()
                        .HasForeignKey("FuelAmountMeasuredId");

                    b.HasOne("Tracking.Data.Model.TransportMeans", "OperatingTransportMeans")
                        .WithMany("OperatedTransportMovements")
                        .HasForeignKey("OperatingTransportMeansId");

                    b.Navigation("ArrivalLocation");

                    b.Navigation("DepartureLocation");

                    b.Navigation("DistanceCalculated");

                    b.Navigation("DistanceMeasured");

                    b.Navigation("FuelAmountCalculated");

                    b.Navigation("FuelAmountMeasured");

                    b.Navigation("OperatingTransportMeans");
                });

            modelBuilder.Entity("Tracking.Data.Model.VolumetricWeight", b =>
                {
                    b.HasOne("Tracking.Data.Model.Value", "ChargeableWeight")
                        .WithMany()
                        .HasForeignKey("ChargeableWeightId");

                    b.HasOne("Tracking.Data.Model.Value", "ConversionFactor")
                        .WithMany()
                        .HasForeignKey("ConversionFactorId");

                    b.Navigation("ChargeableWeight");

                    b.Navigation("ConversionFactor");
                });

            modelBuilder.Entity("Tracking.Data.Model.Waybill", b =>
                {
                    b.HasOne("Tracking.Data.Model.Location", "ArrivalLocation")
                        .WithMany()
                        .HasForeignKey("ArrivalLocationId");

                    b.HasOne("Tracking.Data.Model.BillingDetails", "BillingDetails")
                        .WithOne("DetailedWaybill")
                        .HasForeignKey("Tracking.Data.Model.Waybill", "BillingDetailsId");

                    b.HasOne("Tracking.Data.Model.Location", "CarrierDeclarationPlace")
                        .WithMany()
                        .HasForeignKey("CarrierDeclarationPlaceId");

                    b.HasOne("Tracking.Data.Model.Location", "DepartureLocation")
                        .WithMany()
                        .HasForeignKey("DepartureLocationId");

                    b.HasOne("Tracking.Data.Model.Waybill", "MasterWaybill")
                        .WithMany("HouseWaybills")
                        .HasForeignKey("MasterWaybillId");

                    b.HasOne("Tracking.Data.Model.Booking", "ReferredBookingOption")
                        .WithOne("IssuedForWaybill")
                        .HasForeignKey("Tracking.Data.Model.Waybill", "ReferredBookingOptionId");

                    b.HasOne("Tracking.Data.Model.Shipment", "Shipment")
                        .WithOne("Waybill")
                        .HasForeignKey("Tracking.Data.Model.Waybill", "ShipmentId");

                    b.Navigation("ArrivalLocation");

                    b.Navigation("BillingDetails");

                    b.Navigation("CarrierDeclarationPlace");

                    b.Navigation("DepartureLocation");

                    b.Navigation("MasterWaybill");

                    b.Navigation("ReferredBookingOption");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Tracking.Data.Model.ItemDg", b =>
                {
                    b.HasOne("Tracking.Data.Model.Person", "EmergencyContact")
                        .WithMany()
                        .HasForeignKey("EmergencyContactId");

                    b.HasOne("Tracking.Data.Model.Value", "NetWeightMeasure")
                        .WithMany()
                        .HasForeignKey("NetWeightMeasureId");

                    b.Navigation("EmergencyContact");

                    b.Navigation("NetWeightMeasure");
                });

            modelBuilder.Entity("Tracking.Data.Model.Actor", b =>
                {
                    b.HasOne("Tracking.Data.Model.Organization", "AssociatedOrganization")
                        .WithMany("ContactPersons")
                        .HasForeignKey("AssociatedOrganizationId");

                    b.Navigation("AssociatedOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.Organization", b =>
                {
                    b.HasOne("Tracking.Data.Model.AccessDelegation", null)
                        .WithMany("IsRequestedFor")
                        .HasForeignKey("AccessDelegationId");

                    b.HasOne("Tracking.Data.Model.Organization", "ParentOrganization")
                        .WithMany("SubOrganization")
                        .HasForeignKey("ParentOrganizationId");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.PieceDg", b =>
                {
                    b.HasOne("Tracking.Data.Model.DgDeclaration", "DgDeclaration")
                        .WithMany()
                        .HasForeignKey("DgDeclarationId");

                    b.Navigation("DgDeclaration");
                });

            modelBuilder.Entity("Tracking.Data.Model.PieceLiveAnimals", b =>
                {
                    b.HasOne("Tracking.Data.Model.EpermitConsignment", "AssociatedEpermit")
                        .WithOne("ConsignmentItems")
                        .HasForeignKey("Tracking.Data.Model.PieceLiveAnimals", "EpermitConsignmentId");

                    b.HasOne("Tracking.Data.Model.Country", "ExportTradeCountry")
                        .WithMany()
                        .HasForeignKey("ExportTradeCountryId");

                    b.HasOne("Tracking.Data.Model.Country", "OriginTradeCountry")
                        .WithMany()
                        .HasForeignKey("OriginTradeCountryId");

                    b.Navigation("AssociatedEpermit");

                    b.Navigation("ExportTradeCountry");

                    b.Navigation("OriginTradeCountry");
                });

            modelBuilder.Entity("Tracking.Data.Model.ProductDg", b =>
                {
                    b.HasOne("Tracking.Data.Model.DgProductRadioactive", "DgRadioactiveMaterial")
                        .WithOne("ForProductDg")
                        .HasForeignKey("Tracking.Data.Model.ProductDg", "DgProductRadioactiveId");

                    b.Navigation("DgRadioactiveMaterial");
                });

            modelBuilder.Entity("Tracking.Data.Model.Person", b =>
                {
                    b.HasOne("Tracking.Data.Model.Booking", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("BookingId");

                    b.HasOne("Tracking.Data.Model.Check", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("CheckId");

                    b.HasOne("Tracking.Data.Model.Composing", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("ComposingId");

                    b.HasOne("Tracking.Data.Model.LoadingActivity", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("LoadingActivityId");

                    b.HasOne("Tracking.Data.Model.Loading", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("LoadingId");

                    b.HasOne("Tracking.Data.Model.Moving", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("MovingId");

                    b.HasOne("Tracking.Data.Model.Storage", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("StorageId");

                    b.HasOne("Tracking.Data.Model.Storing", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("StoringId");

                    b.HasOne("Tracking.Data.Model.TransportMovement", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("TransportMovementId");

                    b.HasOne("Tracking.Data.Model.UnitComposition", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("UnitCompositionId");
                });

            modelBuilder.Entity("Tracking.Data.Model.AccessDelegation", b =>
                {
                    b.Navigation("HasPermission");

                    b.Navigation("IsRequestedFor");
                });

            modelBuilder.Entity("Tracking.Data.Model.AccessPermissions", b =>
                {
                    b.Navigation("HasPermission");
                });

            modelBuilder.Entity("Tracking.Data.Model.Answer", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("InvolvedParties");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Tracking.Data.Model.BillingDetails", b =>
                {
                    b.Navigation("Adjustments");

                    b.Navigation("Checks");

                    b.Navigation("DetailedWaybill");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Booking", b =>
                {
                    b.Navigation("ActivitySequences");

                    b.Navigation("Checks");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");

                    b.Navigation("IssuedForWaybill");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingOption", b =>
                {
                    b.Navigation("BookingTimes");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("InvolvedParties");

                    b.Navigation("Price");

                    b.Navigation("Routing");

                    b.Navigation("TransportLegs");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingOptionRequest", b =>
                {
                    b.Navigation("BookingOption");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("RoutingPreference");

                    b.Navigation("TimePreferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingRequest", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("BookingOption");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.BookingShipment", b =>
                {
                    b.Navigation("BookingOptionRequest");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Check", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");
                });

            modelBuilder.Entity("Tracking.Data.Model.CheckTemplate", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("InvolvedParties");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Tracking.Data.Model.CheckTotalResult", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Co2Emissions", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Composing", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ComposedMaterials");

                    b.Navigation("ComposedPieces");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.CustomsInformation", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.DgDeclaration", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.DgProductRadioactive", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("ForProductDg");

                    b.Navigation("Isotopes");
                });

            modelBuilder.Entity("Tracking.Data.Model.DgRadioactiveIsotope", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.EpermitConsignment", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ConsignmentItems");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.EpermitSignature", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Error", b =>
                {
                    b.Navigation("HasErrorDetail");
                });

            modelBuilder.Entity("Tracking.Data.Model.ExternalReference", b =>
                {
                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Insurance", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.IotDevice", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ConnectedSensors");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Item", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("OtherIdentifiers");
                });

            modelBuilder.Entity("Tracking.Data.Model.LiveAnimalsEpermit", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("Consignments");

                    b.Navigation("ExternalReferences");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("Tracking.Data.Model.Loading", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");

                    b.Navigation("LoadedMaterials");

                    b.Navigation("LoadedPieces");

                    b.Navigation("LoadedUnits");
                });

            modelBuilder.Entity("Tracking.Data.Model.LoadingActivity", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");

                    b.Navigation("LoadingActions");
                });

            modelBuilder.Entity("Tracking.Data.Model.LoadingMaterial", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("OtherIdentifiers");
                });

            modelBuilder.Entity("Tracking.Data.Model.LoadingUnit", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("LoadedPiecesOnLoadingUnit");
                });

            modelBuilder.Entity("Tracking.Data.Model.Location", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Moving", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Operation", b =>
                {
                    b.Navigation("Objects");
                });

            modelBuilder.Entity("Tracking.Data.Model.PackagingType", b =>
                {
                    b.Navigation("AappliedOnPieces");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Party", b =>
                {
                    b.Navigation("OtherIdentifiers");
                });

            modelBuilder.Entity("Tracking.Data.Model.Piece", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ContainedItems");

                    b.Navigation("ContainedPieces");

                    b.Navigation("CustomsInformation");

                    b.Navigation("ExternalReferences");

                    b.Navigation("InvolvedParties");

                    b.Navigation("OtherIdentifiers");

                    b.Navigation("SecurityDeclaration");
                });

            modelBuilder.Entity("Tracking.Data.Model.Price", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Product", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("DescriptionForItems");

                    b.Navigation("ExternalReferences");

                    b.Navigation("OtherCharacteristics");

                    b.Navigation("OtherIdentifiers");
                });

            modelBuilder.Entity("Tracking.Data.Model.Question", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Ratings", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("PreferenceOfRequests");

                    b.Navigation("Ranges");
                });

            modelBuilder.Entity("Tracking.Data.Model.Routing", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExcludedViaPoints");

                    b.Navigation("ExternalReferences");

                    b.Navigation("ScheduledLegs");
                });

            modelBuilder.Entity("Tracking.Data.Model.SecurityDeclaration", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("OtherRegulatedEntities");
                });

            modelBuilder.Entity("Tracking.Data.Model.Sensor", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Tracking.Data.Model.Shipment", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("Insurance");

                    b.Navigation("InvolvedParties");

                    b.Navigation("ShipmentOfPieces");

                    b.Navigation("TotalDimensions");

                    b.Navigation("Waybill");
                });

            modelBuilder.Entity("Tracking.Data.Model.Storage", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");

                    b.Navigation("StoringActions");
                });

            modelBuilder.Entity("Tracking.Data.Model.Storing", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportLegs", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportMeans", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("OperatedTransportMovements");
                });

            modelBuilder.Entity("Tracking.Data.Model.TransportMovement", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("Co2Emissions");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");

                    b.Navigation("MovementTimes");
                });

            modelBuilder.Entity("Tracking.Data.Model.UnitComposition", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("CompositionActions");

                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPersons");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Waybill", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");

                    b.Navigation("HouseWaybills");

                    b.Navigation("InvolvedParties");
                });

            modelBuilder.Entity("Tracking.Data.Model.Actor", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.Organization", b =>
                {
                    b.Navigation("BasedAtLocation");

                    b.Navigation("Checks");

                    b.Navigation("ContactPersons");

                    b.Navigation("OtherIdentifiers");

                    b.Navigation("SubOrganization");
                });

            modelBuilder.Entity("Tracking.Data.Model.Person", b =>
                {
                    b.Navigation("ContactDetails");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Tracking.Data.Model.Company", b =>
                {
                    b.Navigation("ExternalReferences");
                });

            modelBuilder.Entity("Tracking.Data.Model.PublicAuthority", b =>
                {
                    b.Navigation("ExternalReferences");
                });
#pragma warning restore 612, 618
        }
    }
}
