// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tracking.Data;

#nullable disable

namespace Tracking.Data.Migrations
{
    [DbContext(typeof(TrackingDbContext))]
    partial class TrackingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OneRecord.Data.Model.Model.ActivitySequence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SequenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("ActivitySequence");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillPrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Booking");

                    b.HasDiscriminator().HasValue("Booking");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Context", b =>
                {
                    b.Property<string>("Api")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vocab")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Context");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Dimensions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Geolocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GeolocationUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Geolocation");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.IotDevice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssociatedObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IotDeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportMeansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IotDeviceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PieceId");

                    b.HasIndex("SensorId");

                    b.HasIndex("TransportMeansId");

                    b.ToTable("IotDevice");

                    b.HasDiscriminator().HasValue("IotDevice");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Loading", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadingPositionIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnTransportMeansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoadingActivityId");

                    b.HasIndex("OnTransportMeansId");

                    b.ToTable("Loading");

                    b.HasDiscriminator().HasValue("Loading");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.LoadingActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoadingActivity");

                    b.HasDiscriminator().HasValue("LoadingActivity");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeolocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationId");

                    b.ToTable("Location");

                    b.HasDiscriminator().HasValue("Location");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("MeasurementTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordedGeolocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecordedGeolocationId");

                    b.HasIndex("SensorId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.MovementTimes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovementMilestone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovementTimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MovementTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransportMovementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TransportMovementId");

                    b.ToTable("MovementTimes");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Piece", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Coload")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentProductionCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FulfillsUldTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("NvdForCarriage")
                        .HasColumnType("bit");

                    b.Property<bool>("NvdForCustoms")
                        .HasColumnType("bit");

                    b.Property<string>("OfShipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PackageMarkCoded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackagedeIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PieceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingMarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<int>("Slac")
                        .HasColumnType("int");

                    b.Property<string>("SpecialHandlingCodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Stackable")
                        .HasColumnType("bit");

                    b.Property<string>("TextualHandlingInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Turnable")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Upid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("LoadingId");

                    b.HasIndex("OfShipmentId");

                    b.HasIndex("PieceId");

                    b.ToTable("Piece");

                    b.HasDiscriminator().HasValue("Piece");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Sensor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IotDeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IotDeviceId");

                    b.ToTable("Sensor");

                    b.HasDiscriminator().HasValue("Sensor");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Shipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Incoterms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialHandlingCodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextualHandlingInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.TransportMeans", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransportMeans");

                    b.HasDiscriminator().HasValue("TransportMeans");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.TransportMovement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArrivalLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExecutionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeQualifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingTransportMeansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Seal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("TransportIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalLocationId");

                    b.HasIndex("DepartureLocationId");

                    b.HasIndex("OperatingTransportMeansId");

                    b.ToTable("TransportMovement");

                    b.HasDiscriminator().HasValue("TransportMovement");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Waybill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountingInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArrivalLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingDetailsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarrierChargeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CarrierDeclarationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CarrierDeclarationPlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarrierDeclarationSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsignorDeclarationSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomsOriginCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("DestinationCurrencyRate")
                        .HasColumnType("float");

                    b.Property<bool>("ModularCheckNumber")
                        .HasColumnType("bit");

                    b.Property<string>("OtherChargesIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferredBookingOptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingRefNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkeletonIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillPrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaybillType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightValueIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalLocationId");

                    b.HasIndex("CarrierDeclarationPlaceId");

                    b.HasIndex("DepartureLocationId");

                    b.HasIndex("ReferredBookingOptionId")
                        .IsUnique();

                    b.HasIndex("ShipmentId")
                        .IsUnique();

                    b.ToTable("Waybill");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.ActivitySequence", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.Booking", null)
                        .WithMany("ActivitySequences")
                        .HasForeignKey("BookingId");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Dimensions", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.Shipment", null)
                        .WithMany("TotalDimensions")
                        .HasForeignKey("ShipmentId");

                    b.OwnsOne("OneRecord.Data.Model.Model.Value", "Height", b1 =>
                        {
                            b1.Property<string>("DimensionsId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("DimensionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("NumericalValue")
                                .HasColumnType("float")
                                .HasColumnName("HeightValue");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("HeightUnit");

                            b1.HasKey("DimensionsId");

                            b1.ToTable("Dimensions");

                            b1.WithOwner("Dimensions")
                                .HasForeignKey("DimensionsId");

                            b1.Navigation("Dimensions");
                        });

                    b.OwnsOne("OneRecord.Data.Model.Model.Value", "Length", b1 =>
                        {
                            b1.Property<string>("DimensionsId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("DimensionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("NumericalValue")
                                .HasColumnType("float")
                                .HasColumnName("LenghtValue");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LengthUnit");

                            b1.HasKey("DimensionsId");

                            b1.ToTable("Dimensions");

                            b1.WithOwner("Dimensions")
                                .HasForeignKey("DimensionsId");

                            b1.Navigation("Dimensions");
                        });

                    b.OwnsOne("OneRecord.Data.Model.Model.Value", "Volume", b1 =>
                        {
                            b1.Property<string>("DimensionsId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("DimensionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("NumericalValue")
                                .HasColumnType("float")
                                .HasColumnName("VolumeValue");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("VolumeUnit");

                            b1.HasKey("DimensionsId");

                            b1.ToTable("Dimensions");

                            b1.WithOwner("Dimensions")
                                .HasForeignKey("DimensionsId");

                            b1.Navigation("Dimensions");
                        });

                    b.OwnsOne("OneRecord.Data.Model.Model.Value", "Width", b1 =>
                        {
                            b1.Property<string>("DimensionsId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("DimensionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("NumericalValue")
                                .HasColumnType("float")
                                .HasColumnName("WidthValue");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("WidthUnit");

                            b1.HasKey("DimensionsId");

                            b1.ToTable("Dimensions");

                            b1.WithOwner("Dimensions")
                                .HasForeignKey("DimensionsId");

                            b1.Navigation("Dimensions");
                        });

                    b.Navigation("Height")
                        .IsRequired();

                    b.Navigation("Length")
                        .IsRequired();

                    b.Navigation("Volume")
                        .IsRequired();

                    b.Navigation("Width")
                        .IsRequired();
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Geolocation", b =>
                {
                    b.OwnsOne("OneRecord.Data.Model.Model.Value", "Elevation", b1 =>
                        {
                            b1.Property<string>("GeolocationId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("DimensionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DimensionsId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("NumericalValue")
                                .HasColumnType("float")
                                .HasColumnName("GeolocationElevationValue");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("GeolocationElevationUnit");

                            b1.HasKey("GeolocationId");

                            b1.HasIndex("DimensionsId");

                            b1.ToTable("Geolocation");

                            b1.HasOne("OneRecord.Data.Model.Model.Dimensions", "Dimensions")
                                .WithMany()
                                .HasForeignKey("DimensionsId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("GeolocationId");

                            b1.Navigation("Dimensions");
                        });

                    b.Navigation("Elevation")
                        .IsRequired();
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.IotDevice", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.IotDevice", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("IotDeviceId");

                    b.HasOne("OneRecord.Data.Model.Model.Location", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("LocationId");

                    b.HasOne("OneRecord.Data.Model.Model.Piece", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("PieceId");

                    b.HasOne("OneRecord.Data.Model.Model.Sensor", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("SensorId");

                    b.HasOne("OneRecord.Data.Model.Model.TransportMeans", null)
                        .WithMany("AttachedIotDevices")
                        .HasForeignKey("TransportMeansId");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Loading", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.LoadingActivity", null)
                        .WithMany("LoadingActions")
                        .HasForeignKey("LoadingActivityId");

                    b.HasOne("OneRecord.Data.Model.Model.TransportMeans", "OnTransportMeans")
                        .WithMany()
                        .HasForeignKey("OnTransportMeansId");

                    b.Navigation("OnTransportMeans");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Location", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.Geolocation", "Geolocation")
                        .WithMany()
                        .HasForeignKey("GeolocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geolocation");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Measurement", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.Geolocation", "RecordedGeolocation")
                        .WithMany()
                        .HasForeignKey("RecordedGeolocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneRecord.Data.Model.Model.Sensor", null)
                        .WithMany("Measurements")
                        .HasForeignKey("SensorId");

                    b.OwnsOne("OneRecord.Data.Model.Model.Value", "MeasurementValue", b1 =>
                        {
                            b1.Property<string>("MeasurementId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("DimensionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DimensionsId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("NumericalValue")
                                .HasColumnType("float")
                                .HasColumnName("MeasurementValue");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MeasurementUnit");

                            b1.HasKey("MeasurementId");

                            b1.HasIndex("DimensionsId");

                            b1.ToTable("Measurement");

                            b1.HasOne("OneRecord.Data.Model.Model.Dimensions", "Dimensions")
                                .WithMany()
                                .HasForeignKey("DimensionsId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MeasurementId");

                            b1.Navigation("Dimensions");
                        });

                    b.Navigation("MeasurementValue")
                        .IsRequired();

                    b.Navigation("RecordedGeolocation");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.MovementTimes", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.TransportMovement", null)
                        .WithMany("MovementTimes")
                        .HasForeignKey("TransportMovementId");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Piece", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.Dimensions", "Dimensions")
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneRecord.Data.Model.Model.Loading", null)
                        .WithMany("LoadedPieces")
                        .HasForeignKey("LoadingId");

                    b.HasOne("OneRecord.Data.Model.Model.Shipment", "OfShipment")
                        .WithMany("Pieces")
                        .HasForeignKey("OfShipmentId");

                    b.HasOne("OneRecord.Data.Model.Model.Piece", null)
                        .WithMany("ContainedPieces")
                        .HasForeignKey("PieceId");

                    b.OwnsOne("OneRecord.Data.Model.Model.Value", "GrossWeight", b1 =>
                        {
                            b1.Property<string>("PieceId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("DimensionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DimensionsId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("NumericalValue")
                                .HasColumnType("float")
                                .HasColumnName("GrossWeightValue");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("GrossWeightUnit");

                            b1.HasKey("PieceId");

                            b1.HasIndex("DimensionsId");

                            b1.ToTable("Piece");

                            b1.HasOne("OneRecord.Data.Model.Model.Dimensions", "Dimensions")
                                .WithMany()
                                .HasForeignKey("DimensionsId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("PieceId");

                            b1.Navigation("Dimensions");
                        });

                    b.Navigation("Dimensions");

                    b.Navigation("GrossWeight")
                        .IsRequired();

                    b.Navigation("OfShipment");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Sensor", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.IotDevice", "PartOfIotDevice")
                        .WithMany("ConnectedSensors")
                        .HasForeignKey("IotDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartOfIotDevice");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Shipment", b =>
                {
                    b.OwnsOne("OneRecord.Data.Model.Model.Value", "TotalGrossWeight", b1 =>
                        {
                            b1.Property<string>("ShipmentId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("DimensionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DimensionsId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("NumericalValue")
                                .HasColumnType("float")
                                .HasColumnName("TotalGrossWeightValue");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TotalGrossWeightUnit");

                            b1.HasKey("ShipmentId");

                            b1.HasIndex("DimensionsId");

                            b1.ToTable("Shipment");

                            b1.HasOne("OneRecord.Data.Model.Model.Dimensions", "Dimensions")
                                .WithMany()
                                .HasForeignKey("DimensionsId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");

                            b1.Navigation("Dimensions");
                        });

                    b.Navigation("TotalGrossWeight")
                        .IsRequired();
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.TransportMovement", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.Location", "ArrivalLocation")
                        .WithMany()
                        .HasForeignKey("ArrivalLocationId");

                    b.HasOne("OneRecord.Data.Model.Model.Location", "DepartureLocation")
                        .WithMany()
                        .HasForeignKey("DepartureLocationId");

                    b.HasOne("OneRecord.Data.Model.Model.TransportMeans", "OperatingTransportMeans")
                        .WithMany("OperatedTransportMovements")
                        .HasForeignKey("OperatingTransportMeansId");

                    b.Navigation("ArrivalLocation");

                    b.Navigation("DepartureLocation");

                    b.Navigation("OperatingTransportMeans");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Waybill", b =>
                {
                    b.HasOne("OneRecord.Data.Model.Model.Location", "ArrivalLocation")
                        .WithMany()
                        .HasForeignKey("ArrivalLocationId");

                    b.HasOne("OneRecord.Data.Model.Model.Location", "CarrierDeclarationPlace")
                        .WithMany()
                        .HasForeignKey("CarrierDeclarationPlaceId");

                    b.HasOne("OneRecord.Data.Model.Model.Location", "DepartureLocation")
                        .WithMany()
                        .HasForeignKey("DepartureLocationId");

                    b.HasOne("OneRecord.Data.Model.Model.Booking", "ReferredBookingOption")
                        .WithOne("IssuedForWaybill")
                        .HasForeignKey("OneRecord.Data.Model.Model.Waybill", "ReferredBookingOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneRecord.Data.Model.Model.Shipment", "Shipment")
                        .WithOne("Waybill")
                        .HasForeignKey("OneRecord.Data.Model.Model.Waybill", "ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalLocation");

                    b.Navigation("CarrierDeclarationPlace");

                    b.Navigation("DepartureLocation");

                    b.Navigation("ReferredBookingOption");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Booking", b =>
                {
                    b.Navigation("ActivitySequences");

                    b.Navigation("IssuedForWaybill")
                        .IsRequired();
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.IotDevice", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("ConnectedSensors");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Loading", b =>
                {
                    b.Navigation("LoadedPieces");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.LoadingActivity", b =>
                {
                    b.Navigation("LoadingActions");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Location", b =>
                {
                    b.Navigation("AttachedIotDevices");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Piece", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("ContainedPieces");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Sensor", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.Shipment", b =>
                {
                    b.Navigation("Pieces");

                    b.Navigation("TotalDimensions");

                    b.Navigation("Waybill")
                        .IsRequired();
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.TransportMeans", b =>
                {
                    b.Navigation("AttachedIotDevices");

                    b.Navigation("OperatedTransportMovements");
                });

            modelBuilder.Entity("OneRecord.Data.Model.Model.TransportMovement", b =>
                {
                    b.Navigation("MovementTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
