/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Reelables.Api.Fake.Models;

/// <summary>
/// 
/// </summary>
[DataContract]
public partial class PrintJobStatus : IEquatable<PrintJobStatus>
{
    /// <summary>
    /// Date that the Print Job status was created, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;
    /// </summary>
    /// <value>Date that the Print Job status was created, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;</value>
    [Required]
    [RegularExpression("^[0-9TZ:-]*$")]
    [MaxLength(20)]
    [DataMember(Name="createdAt", EmitDefaultValue=false)]
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// The status of the Print Job
    /// </summary>
    /// <value>The status of the Print Job</value>
    [Required]
    [RegularExpression("^[a-zA-Z0-9!@#$&()\\-`.+,/\" ]*$")]
    [MaxLength(100)]
    [DataMember(Name="status", EmitDefaultValue=false)]
    public string Status { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PrintJobStatus {\n");
        sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((PrintJobStatus)obj);
    }

    /// <summary>
    /// Returns true if PrintJobStatus instances are equal
    /// </summary>
    /// <param name="other">Instance of PrintJobStatus to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PrintJobStatus other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return 
            (
                CreatedAt == other.CreatedAt ||
                CreatedAt != null &&
                CreatedAt.Equals(other.CreatedAt)
            ) && 
            (
                Status == other.Status ||
                Status != null &&
                Status.Equals(other.Status)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (CreatedAt != null)
                hashCode = hashCode * 59 + CreatedAt.GetHashCode();
            if (Status != null)
                hashCode = hashCode * 59 + Status.GetHashCode();
            return hashCode;
        }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(PrintJobStatus left, PrintJobStatus right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(PrintJobStatus left, PrintJobStatus right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
}