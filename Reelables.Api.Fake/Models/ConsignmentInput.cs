/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Reelables.Api.Fake.Models;

/// <summary>
/// Consignment data
/// </summary>
[DataContract]
public partial class ConsignmentInput : IEquatable<ConsignmentInput>
{
    /// <summary>
    /// Gets or Sets Pieces
    /// </summary>
    [Required]
    [DataMember(Name="pieces", EmitDefaultValue=false)]
    public List<ConsignmentInputPiecesInner> Pieces { get; set; }

    /// <summary>
    /// The tracking reference that identifies the Consignment in the user system
    /// </summary>
    /// <value>The tracking reference that identifies the Consignment in the user system</value>
    [Required]
    [MaxLength(500)]
    [DataMember(Name="trackingRef", EmitDefaultValue=false)]
    public string TrackingRef { get; set; }

    /// <summary>
    /// Gets or Sets Gateways
    /// </summary>
    [DataMember(Name="gateways", EmitDefaultValue=false)]
    public List<ConsignmentInputGatewaysInner> Gateways { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ConsignmentInput {\n");
        sb.Append("  Pieces: ").Append(Pieces).Append("\n");
        sb.Append("  TrackingRef: ").Append(TrackingRef).Append("\n");
        sb.Append("  Gateways: ").Append(Gateways).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((ConsignmentInput)obj);
    }

    /// <summary>
    /// Returns true if ConsignmentInput instances are equal
    /// </summary>
    /// <param name="other">Instance of ConsignmentInput to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ConsignmentInput other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return 
            (
                Pieces == other.Pieces ||
                Pieces != null &&
                other.Pieces != null &&
                Pieces.SequenceEqual(other.Pieces)
            ) && 
            (
                TrackingRef == other.TrackingRef ||
                TrackingRef != null &&
                TrackingRef.Equals(other.TrackingRef)
            ) && 
            (
                Gateways == other.Gateways ||
                Gateways != null &&
                other.Gateways != null &&
                Gateways.SequenceEqual(other.Gateways)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Pieces != null)
                hashCode = hashCode * 59 + Pieces.GetHashCode();
            if (TrackingRef != null)
                hashCode = hashCode * 59 + TrackingRef.GetHashCode();
            if (Gateways != null)
                hashCode = hashCode * 59 + Gateways.GetHashCode();
            return hashCode;
        }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(ConsignmentInput left, ConsignmentInput right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(ConsignmentInput left, ConsignmentInput right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
}