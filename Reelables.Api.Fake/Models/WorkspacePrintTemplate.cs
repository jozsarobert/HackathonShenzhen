/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkspacePrintTemplate : IEquatable<WorkspacePrintTemplate>
    {
        /// <summary>
        /// Gets or Sets RequiredParams
        /// </summary>
        [DataMember(Name="requiredParams", EmitDefaultValue=false)]
        public List<string> RequiredParams { get; set; }

        /// <summary>
        /// The indentifier of the Print Template
        /// </summary>
        /// <value>The indentifier of the Print Template</value>
        [Required]
        [RegularExpression("^template[0-9]*$")]
        [MaxLength(12)]
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Unique identifier of the Workspace that the Print Template belongs to. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;
        /// </summary>
        /// <value>Unique identifier of the Workspace that the Print Template belongs to. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;</value>
        [Required]
        [RegularExpression("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
        [MaxLength(36)]
        [DataMember(Name="workspaceId", EmitDefaultValue=false)]
        public Guid WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkspacePrintTemplate {\n");
            sb.Append("  RequiredParams: ").Append(RequiredParams).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkspacePrintTemplate)obj);
        }

        /// <summary>
        /// Returns true if WorkspacePrintTemplate instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkspacePrintTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspacePrintTemplate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequiredParams == other.RequiredParams ||
                    RequiredParams != null &&
                    other.RequiredParams != null &&
                    RequiredParams.SequenceEqual(other.RequiredParams)
                ) && 
                (
                    TemplateId == other.TemplateId ||
                    TemplateId != null &&
                    TemplateId.Equals(other.TemplateId)
                ) && 
                (
                    WorkspaceId == other.WorkspaceId ||
                    WorkspaceId != null &&
                    WorkspaceId.Equals(other.WorkspaceId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequiredParams != null)
                    hashCode = hashCode * 59 + RequiredParams.GetHashCode();
                    if (TemplateId != null)
                    hashCode = hashCode * 59 + TemplateId.GetHashCode();
                    if (WorkspaceId != null)
                    hashCode = hashCode * 59 + WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkspacePrintTemplate left, WorkspacePrintTemplate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkspacePrintTemplate left, WorkspacePrintTemplate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
