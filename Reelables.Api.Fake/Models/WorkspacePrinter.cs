/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Reelables.Api.Fake.Models;

/// <summary>
/// 
/// </summary>
[DataContract]
public partial class WorkspacePrinter : IEquatable<WorkspacePrinter>
{
    /// <summary>
    /// The name of the Printer
    /// </summary>
    /// <value>The name of the Printer</value>
    [Required]
    [RegularExpression("^[a-zA-Z0-9!@#$&()\\-`.+,/\" ]*$")]
    [MaxLength(500)]
    [DataMember(Name="name", EmitDefaultValue=false)]
    public string Name { get; set; }

    /// <summary>
    /// Printer identifier - the serial number of the Printer. Example: &#39;abcdefgh123456789&#39;
    /// </summary>
    /// <value>Printer identifier - the serial number of the Printer. Example: &#39;abcdefgh123456789&#39;</value>
    [Required]
    [RegularExpression("^[-_A-Za-z0-9]*$")]
    [MaxLength(50)]
    [DataMember(Name="printerId", EmitDefaultValue=false)]
    public string PrinterId { get; set; }

    /// <summary>
    /// Indicates whether the Printer is currently online
    /// </summary>
    /// <value>Indicates whether the Printer is currently online</value>
    [DataMember(Name="isOnline", EmitDefaultValue=true)]
    public bool IsOnline { get; set; }

    /// <summary>
    /// Date that the Printer was added to the Workspace, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;
    /// </summary>
    /// <value>Date that the Printer was added to the Workspace, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;</value>
    [RegularExpression("^[0-9TZ:-]*$")]
    [MaxLength(20)]
    [DataMember(Name="addedOn", EmitDefaultValue=false)]
    public DateTime AddedOn { get; set; }

    /// <summary>
    /// Unique identifier of the Workspace that the Printer belongs to. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;
    /// </summary>
    /// <value>Unique identifier of the Workspace that the Printer belongs to. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;</value>
    [Required]
    [RegularExpression("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
    [MaxLength(36)]
    [DataMember(Name="workspaceId", EmitDefaultValue=false)]
    public Guid WorkspaceId { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class WorkspacePrinter {\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  PrinterId: ").Append(PrinterId).Append("\n");
        sb.Append("  IsOnline: ").Append(IsOnline).Append("\n");
        sb.Append("  AddedOn: ").Append(AddedOn).Append("\n");
        sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((WorkspacePrinter)obj);
    }

    /// <summary>
    /// Returns true if WorkspacePrinter instances are equal
    /// </summary>
    /// <param name="other">Instance of WorkspacePrinter to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(WorkspacePrinter other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return 
            (
                Name == other.Name ||
                Name != null &&
                Name.Equals(other.Name)
            ) && 
            (
                PrinterId == other.PrinterId ||
                PrinterId != null &&
                PrinterId.Equals(other.PrinterId)
            ) && 
            (
                IsOnline == other.IsOnline ||
                    
                IsOnline.Equals(other.IsOnline)
            ) && 
            (
                AddedOn == other.AddedOn ||
                AddedOn != null &&
                AddedOn.Equals(other.AddedOn)
            ) && 
            (
                WorkspaceId == other.WorkspaceId ||
                WorkspaceId != null &&
                WorkspaceId.Equals(other.WorkspaceId)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Name != null)
                hashCode = hashCode * 59 + Name.GetHashCode();
            if (PrinterId != null)
                hashCode = hashCode * 59 + PrinterId.GetHashCode();
                    
            hashCode = hashCode * 59 + IsOnline.GetHashCode();
            if (AddedOn != null)
                hashCode = hashCode * 59 + AddedOn.GetHashCode();
            if (WorkspaceId != null)
                hashCode = hashCode * 59 + WorkspaceId.GetHashCode();
            return hashCode;
        }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(WorkspacePrinter left, WorkspacePrinter right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(WorkspacePrinter left, WorkspacePrinter right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
}