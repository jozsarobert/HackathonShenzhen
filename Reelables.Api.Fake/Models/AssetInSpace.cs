/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AssetInSpace : IEquatable<AssetInSpace>
    {
        /// <summary>
        /// The name of the Space
        /// </summary>
        /// <value>The name of the Space</value>
        [Required]
        [RegularExpression("^[a-zA-Z0-9!@#$&()\\-`.+,/\" ]*$")]
        [MaxLength(500)]
        [DataMember(Name="spaceName", EmitDefaultValue=false)]
        public string SpaceName { get; set; }

        /// <summary>
        /// Unique identifier of the Space. Example: &#39;00Es43YBJfNRXNSvLmni&#39;
        /// </summary>
        /// <value>Unique identifier of the Space. Example: &#39;00Es43YBJfNRXNSvLmni&#39;</value>
        [Required]
        [RegularExpression("^[-_A-Za-z0-9]*$")]
        [MaxLength(20)]
        [DataMember(Name="spaceId", EmitDefaultValue=false)]
        public string SpaceId { get; set; }

        /// <summary>
        /// Indicate whether the Asset has exited the Space
        /// </summary>
        /// <value>Indicate whether the Asset has exited the Space</value>
        [DataMember(Name="hasExited", EmitDefaultValue=true)]
        public bool HasExited { get; set; }

        /// <summary>
        /// Date that the Asset entered the Space. Example: &#39;2019-07-21T17:32:28Z&#39;
        /// </summary>
        /// <value>Date that the Asset entered the Space. Example: &#39;2019-07-21T17:32:28Z&#39;</value>
        [Required]
        [RegularExpression("^[0-9TZ:-]*$")]
        [MaxLength(20)]
        [DataMember(Name="enteredOn", EmitDefaultValue=false)]
        public DateTime EnteredOn { get; set; }

        /// <summary>
        /// Date that the Asset exited the Space. Example: &#39;2019-07-21T17:32:28Z&#39;
        /// </summary>
        /// <value>Date that the Asset exited the Space. Example: &#39;2019-07-21T17:32:28Z&#39;</value>
        [RegularExpression("^[0-9TZ:-]*$")]
        [MaxLength(20)]
        [DataMember(Name="exitedOn", EmitDefaultValue=false)]
        public DateTime ExitedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetInSpace {\n");
            sb.Append("  SpaceName: ").Append(SpaceName).Append("\n");
            sb.Append("  SpaceId: ").Append(SpaceId).Append("\n");
            sb.Append("  HasExited: ").Append(HasExited).Append("\n");
            sb.Append("  EnteredOn: ").Append(EnteredOn).Append("\n");
            sb.Append("  ExitedOn: ").Append(ExitedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetInSpace)obj);
        }

        /// <summary>
        /// Returns true if AssetInSpace instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetInSpace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetInSpace other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SpaceName == other.SpaceName ||
                    SpaceName != null &&
                    SpaceName.Equals(other.SpaceName)
                ) && 
                (
                    SpaceId == other.SpaceId ||
                    SpaceId != null &&
                    SpaceId.Equals(other.SpaceId)
                ) && 
                (
                    HasExited == other.HasExited ||
                    
                    HasExited.Equals(other.HasExited)
                ) && 
                (
                    EnteredOn == other.EnteredOn ||
                    EnteredOn != null &&
                    EnteredOn.Equals(other.EnteredOn)
                ) && 
                (
                    ExitedOn == other.ExitedOn ||
                    ExitedOn != null &&
                    ExitedOn.Equals(other.ExitedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SpaceName != null)
                    hashCode = hashCode * 59 + SpaceName.GetHashCode();
                    if (SpaceId != null)
                    hashCode = hashCode * 59 + SpaceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasExited.GetHashCode();
                    if (EnteredOn != null)
                    hashCode = hashCode * 59 + EnteredOn.GetHashCode();
                    if (ExitedOn != null)
                    hashCode = hashCode * 59 + ExitedOn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetInSpace left, AssetInSpace right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetInSpace left, AssetInSpace right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
