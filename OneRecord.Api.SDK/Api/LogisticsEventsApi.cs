/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using OneRecord.Api.SDK.Client;
using OneRecord.Api.SDK.Model;

namespace OneRecord.Api.SDK.Api;


/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILogisticsEventsApiSync : IApiAccessor
{
    #region Synchronous Operations
    /// <summary>
    /// Append a LogisticsEvent to the event log of a given LogisticsObject
    /// </summary>
    /// <remarks>
    /// Add a LogisticsEvent to a given LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEvent"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AppendLogisticsEvent(string httpsLogisticsObjectId, LogisticsEvent httpsLogisticsEvent, int httpsOperationIndex = 0);

    /// <summary>
    /// Append a LogisticsEvent to the event log of a given LogisticsObject
    /// </summary>
    /// <remarks>
    /// Add a LogisticsEvent to a given LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEvent"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> AppendLogisticsEventWithHttpInfo(string httpsLogisticsObjectId, LogisticsEvent httpsLogisticsEvent, int httpsOperationIndex = 0);
    /// <summary>
    /// Retrieves a LogisticsEvents
    /// </summary>
    /// <remarks>
    /// Get a specific LogisticsEvents from a give LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEventsId"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>LogisticsEvent</returns>
    LogisticsEvent GetLogisticsEvent(string httpsLogisticsObjectId, string httpsLogisticsEventsId, int httpsOperationIndex = 0);

    /// <summary>
    /// Retrieves a LogisticsEvents
    /// </summary>
    /// <remarks>
    /// Get a specific LogisticsEvents from a give LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEventsId"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of LogisticsEvent</returns>
    ApiResponse<LogisticsEvent> GetLogisticsEventWithHttpInfo(string httpsLogisticsObjectId, string httpsLogisticsEventsId, int httpsOperationIndex = 0);
    /// <summary>
    /// Retrieves the LogisticsEvents of a given LogisticsObject
    /// </summary>
    /// <remarks>
    /// Retrieve the list of LogisticsEvents of a given LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsEventType"> (optional)</param>
    /// <param name="httpsCreatedAfter"> (optional)</param>
    /// <param name="httpsCreatedBefore"> (optional)</param>
    /// <param name="httpsOccurredAfter"> (optional)</param>
    /// <param name="httpsOccurredBefore"> (optional)</param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>LogisticsEventCollection</returns>
    LogisticsEventCollection GetLogisticsEvents(string httpsLogisticsObjectId, List<string>? httpsEventType = default(List<string>?), DateTime? httpsCreatedAfter = default(DateTime?), DateTime? httpsCreatedBefore = default(DateTime?), DateTime? httpsOccurredAfter = default(DateTime?), DateTime? httpsOccurredBefore = default(DateTime?), int httpsOperationIndex = 0);

    /// <summary>
    /// Retrieves the LogisticsEvents of a given LogisticsObject
    /// </summary>
    /// <remarks>
    /// Retrieve the list of LogisticsEvents of a given LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsEventType"> (optional)</param>
    /// <param name="httpsCreatedAfter"> (optional)</param>
    /// <param name="httpsCreatedBefore"> (optional)</param>
    /// <param name="httpsOccurredAfter"> (optional)</param>
    /// <param name="httpsOccurredBefore"> (optional)</param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of LogisticsEventCollection</returns>
    ApiResponse<LogisticsEventCollection> GetLogisticsEventsWithHttpInfo(string httpsLogisticsObjectId, List<string>? httpsEventType = default(List<string>?), DateTime? httpsCreatedAfter = default(DateTime?), DateTime? httpsCreatedBefore = default(DateTime?), DateTime? httpsOccurredAfter = default(DateTime?), DateTime? httpsOccurredBefore = default(DateTime?), int httpsOperationIndex = 0);
    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILogisticsEventsApiAsync : IApiAccessor
{
    #region Asynchronous Operations
    /// <summary>
    /// Append a LogisticsEvent to the event log of a given LogisticsObject
    /// </summary>
    /// <remarks>
    /// Add a LogisticsEvent to a given LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEvent"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    System.Threading.Tasks.Task AppendLogisticsEventAsync(string httpsLogisticsObjectId, LogisticsEvent httpsLogisticsEvent, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Append a LogisticsEvent to the event log of a given LogisticsObject
    /// </summary>
    /// <remarks>
    /// Add a LogisticsEvent to a given LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEvent"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> AppendLogisticsEventWithHttpInfoAsync(string httpsLogisticsObjectId, LogisticsEvent httpsLogisticsEvent, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Retrieves a LogisticsEvents
    /// </summary>
    /// <remarks>
    /// Get a specific LogisticsEvents from a give LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEventsId"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LogisticsEvent</returns>
    System.Threading.Tasks.Task<LogisticsEvent> GetLogisticsEventAsync(string httpsLogisticsObjectId, string httpsLogisticsEventsId, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Retrieves a LogisticsEvents
    /// </summary>
    /// <remarks>
    /// Get a specific LogisticsEvents from a give LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEventsId"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LogisticsEvent)</returns>
    System.Threading.Tasks.Task<ApiResponse<LogisticsEvent>> GetLogisticsEventWithHttpInfoAsync(string httpsLogisticsObjectId, string httpsLogisticsEventsId, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Retrieves the LogisticsEvents of a given LogisticsObject
    /// </summary>
    /// <remarks>
    /// Retrieve the list of LogisticsEvents of a given LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsEventType"> (optional)</param>
    /// <param name="httpsCreatedAfter"> (optional)</param>
    /// <param name="httpsCreatedBefore"> (optional)</param>
    /// <param name="httpsOccurredAfter"> (optional)</param>
    /// <param name="httpsOccurredBefore"> (optional)</param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LogisticsEventCollection</returns>
    System.Threading.Tasks.Task<LogisticsEventCollection> GetLogisticsEventsAsync(string httpsLogisticsObjectId, List<string>? httpsEventType = default(List<string>?), DateTime? httpsCreatedAfter = default(DateTime?), DateTime? httpsCreatedBefore = default(DateTime?), DateTime? httpsOccurredAfter = default(DateTime?), DateTime? httpsOccurredBefore = default(DateTime?), int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Retrieves the LogisticsEvents of a given LogisticsObject
    /// </summary>
    /// <remarks>
    /// Retrieve the list of LogisticsEvents of a given LogisticsObject
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsEventType"> (optional)</param>
    /// <param name="httpsCreatedAfter"> (optional)</param>
    /// <param name="httpsCreatedBefore"> (optional)</param>
    /// <param name="httpsOccurredAfter"> (optional)</param>
    /// <param name="httpsOccurredBefore"> (optional)</param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LogisticsEventCollection)</returns>
    System.Threading.Tasks.Task<ApiResponse<LogisticsEventCollection>> GetLogisticsEventsWithHttpInfoAsync(string httpsLogisticsObjectId, List<string>? httpsEventType = default(List<string>?), DateTime? httpsCreatedAfter = default(DateTime?), DateTime? httpsCreatedBefore = default(DateTime?), DateTime? httpsOccurredAfter = default(DateTime?), DateTime? httpsOccurredBefore = default(DateTime?), int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));
    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILogisticsEventsApi : ILogisticsEventsApiSync, ILogisticsEventsApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class LogisticsEventsApi : ILogisticsEventsApi
{
    private ExceptionFactory _exceptionFactory = (httpsName, httpsResponse) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="LogisticsEventsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public LogisticsEventsApi() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="LogisticsEventsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public LogisticsEventsApi(string httpsBasePath)
    {
        this.HttpsConfiguration = Configuration.MergeConfigurations(
            GlobalConfiguration.HttpsInstance,
            new Configuration { HttpsBasePath = httpsBasePath }
        );
        this.HttpsClient = new ApiClient(this.HttpsConfiguration.HttpsBasePath);
        this.HttpsAsynchronousClient = new ApiClient(this.HttpsConfiguration.HttpsBasePath);
        this.HttpsExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="LogisticsEventsApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="httpsConfiguration">An instance of Configuration</param>
    /// <returns></returns>
    public LogisticsEventsApi(Configuration httpsConfiguration)
    {
        if (httpsConfiguration == null) throw new ArgumentNullException("httpsConfiguration");

        this.HttpsConfiguration = Configuration.MergeConfigurations(
            GlobalConfiguration.HttpsInstance,
            httpsConfiguration
        );
        this.HttpsClient = new ApiClient(this.HttpsConfiguration.HttpsBasePath);
        this.HttpsAsynchronousClient = new ApiClient(this.HttpsConfiguration.HttpsBasePath);
        HttpsExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="LogisticsEventsApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="httpsClient">The client interface for synchronous API access.</param>
    /// <param name="httpsAsyncClient">The client interface for asynchronous API access.</param>
    /// <param name="httpsConfiguration">The configuration object.</param>
    public LogisticsEventsApi(ISynchronousClient httpsClient, IAsynchronousClient httpsAsyncClient, IReadableConfiguration httpsConfiguration)
    {
        if (httpsClient == null) throw new ArgumentNullException("httpsClient");
        if (httpsAsyncClient == null) throw new ArgumentNullException("httpsAsyncClient");
        if (httpsConfiguration == null) throw new ArgumentNullException("httpsConfiguration");

        this.HttpsClient = httpsClient;
        this.HttpsAsynchronousClient = httpsAsyncClient;
        this.HttpsConfiguration = httpsConfiguration;
        this.HttpsExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient HttpsAsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient HttpsClient { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return this.HttpsConfiguration.HttpsBasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration HttpsConfiguration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory HttpsExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
            {
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            }
            return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
    }

    /// <summary>
    /// Append a LogisticsEvent to the event log of a given LogisticsObject Add a LogisticsEvent to a given LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEvent"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AppendLogisticsEvent(string httpsLogisticsObjectId, LogisticsEvent httpsLogisticsEvent, int httpsOperationIndex = 0)
    {
        AppendLogisticsEventWithHttpInfo(httpsLogisticsObjectId, httpsLogisticsEvent);
    }

    /// <summary>
    /// Append a LogisticsEvent to the event log of a given LogisticsObject Add a LogisticsEvent to a given LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEvent"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<Object> AppendLogisticsEventWithHttpInfo(string httpsLogisticsObjectId, LogisticsEvent httpsLogisticsEvent, int httpsOperationIndex = 0)
    {
        // verify the required parameter 'logisticsObjectId' is set
        if (httpsLogisticsObjectId == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsObjectId' when calling LogisticsEventsApi->AppendLogisticsEvent");
        }

        // verify the required parameter 'logisticsEvent' is set
        if (httpsLogisticsEvent == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsEvent' when calling LogisticsEventsApi->AppendLogisticsEvent");
        }

        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
            "application/ld+json"
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsPathParameters.Add("logisticsObjectId", ClientUtils.ParameterToString(httpsLogisticsObjectId)); // path parameter
        localVarRequestOptions.HttpsData = httpsLogisticsEvent;

        localVarRequestOptions.HttpsOperation = "LogisticsEventsApi.AppendLogisticsEvent";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = this.HttpsClient.Post<Object>("/logistics-objects/{logisticsObjectId}/logistics-events", localVarRequestOptions, this.HttpsConfiguration);
        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("AppendLogisticsEvent", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Append a LogisticsEvent to the event log of a given LogisticsObject Add a LogisticsEvent to a given LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEvent"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async System.Threading.Tasks.Task AppendLogisticsEventAsync(string httpsLogisticsObjectId, LogisticsEvent httpsLogisticsEvent, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        await AppendLogisticsEventWithHttpInfoAsync(httpsLogisticsObjectId, httpsLogisticsEvent, httpsOperationIndex, httpsCancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Append a LogisticsEvent to the event log of a given LogisticsObject Add a LogisticsEvent to a given LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEvent"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async System.Threading.Tasks.Task<ApiResponse<Object>> AppendLogisticsEventWithHttpInfoAsync(string httpsLogisticsObjectId, LogisticsEvent httpsLogisticsEvent, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'logisticsObjectId' is set
        if (httpsLogisticsObjectId == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsObjectId' when calling LogisticsEventsApi->AppendLogisticsEvent");
        }

        // verify the required parameter 'logisticsEvent' is set
        if (httpsLogisticsEvent == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsEvent' when calling LogisticsEventsApi->AppendLogisticsEvent");
        }


        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
            "application/ld+json"
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsPathParameters.Add("logisticsObjectId", ClientUtils.ParameterToString(httpsLogisticsObjectId)); // path parameter
        localVarRequestOptions.HttpsData = httpsLogisticsEvent;

        localVarRequestOptions.HttpsOperation = "LogisticsEventsApi.AppendLogisticsEvent";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = await this.HttpsAsynchronousClient.PostAsync<Object>("/logistics-objects/{logisticsObjectId}/logistics-events", localVarRequestOptions, this.HttpsConfiguration, httpsCancellationToken).ConfigureAwait(false);

        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("AppendLogisticsEvent", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Retrieves a LogisticsEvents Get a specific LogisticsEvents from a give LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEventsId"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>LogisticsEvent</returns>
    public LogisticsEvent GetLogisticsEvent(string httpsLogisticsObjectId, string httpsLogisticsEventsId, int httpsOperationIndex = 0)
    {
        ApiResponse<LogisticsEvent> localVarResponse = GetLogisticsEventWithHttpInfo(httpsLogisticsObjectId, httpsLogisticsEventsId);
        return localVarResponse.HttpsData;
    }

    /// <summary>
    /// Retrieves a LogisticsEvents Get a specific LogisticsEvents from a give LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEventsId"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of LogisticsEvent</returns>
    public ApiResponse<LogisticsEvent> GetLogisticsEventWithHttpInfo(string httpsLogisticsObjectId, string httpsLogisticsEventsId, int httpsOperationIndex = 0)
    {
        // verify the required parameter 'logisticsObjectId' is set
        if (httpsLogisticsObjectId == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsObjectId' when calling LogisticsEventsApi->GetLogisticsEvent");
        }

        // verify the required parameter 'logisticsEventsId' is set
        if (httpsLogisticsEventsId == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsEventsId' when calling LogisticsEventsApi->GetLogisticsEvent");
        }

        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsPathParameters.Add("logisticsObjectId", ClientUtils.ParameterToString(httpsLogisticsObjectId)); // path parameter
        localVarRequestOptions.HttpsPathParameters.Add("logisticsEventsId", ClientUtils.ParameterToString(httpsLogisticsEventsId)); // path parameter

        localVarRequestOptions.HttpsOperation = "LogisticsEventsApi.GetLogisticsEvent";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = this.HttpsClient.Get<LogisticsEvent>("/logistics-objects/{logisticsObjectId}/logistics-events/{logisticsEventsId}", localVarRequestOptions, this.HttpsConfiguration);
        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("GetLogisticsEvent", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Retrieves a LogisticsEvents Get a specific LogisticsEvents from a give LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEventsId"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LogisticsEvent</returns>
    public async System.Threading.Tasks.Task<LogisticsEvent> GetLogisticsEventAsync(string httpsLogisticsObjectId, string httpsLogisticsEventsId, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        ApiResponse<LogisticsEvent> localVarResponse = await GetLogisticsEventWithHttpInfoAsync(httpsLogisticsObjectId, httpsLogisticsEventsId, httpsOperationIndex, httpsCancellationToken).ConfigureAwait(false);
        return localVarResponse.HttpsData;
    }

    /// <summary>
    /// Retrieves a LogisticsEvents Get a specific LogisticsEvents from a give LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsLogisticsEventsId"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LogisticsEvent)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<LogisticsEvent>> GetLogisticsEventWithHttpInfoAsync(string httpsLogisticsObjectId, string httpsLogisticsEventsId, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'logisticsObjectId' is set
        if (httpsLogisticsObjectId == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsObjectId' when calling LogisticsEventsApi->GetLogisticsEvent");
        }

        // verify the required parameter 'logisticsEventsId' is set
        if (httpsLogisticsEventsId == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsEventsId' when calling LogisticsEventsApi->GetLogisticsEvent");
        }


        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsPathParameters.Add("logisticsObjectId", ClientUtils.ParameterToString(httpsLogisticsObjectId)); // path parameter
        localVarRequestOptions.HttpsPathParameters.Add("logisticsEventsId", ClientUtils.ParameterToString(httpsLogisticsEventsId)); // path parameter

        localVarRequestOptions.HttpsOperation = "LogisticsEventsApi.GetLogisticsEvent";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = await this.HttpsAsynchronousClient.GetAsync<LogisticsEvent>("/logistics-objects/{logisticsObjectId}/logistics-events/{logisticsEventsId}", localVarRequestOptions, this.HttpsConfiguration, httpsCancellationToken).ConfigureAwait(false);

        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("GetLogisticsEvent", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Retrieves the LogisticsEvents of a given LogisticsObject Retrieve the list of LogisticsEvents of a given LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsEventType"> (optional)</param>
    /// <param name="httpsCreatedAfter"> (optional)</param>
    /// <param name="httpsCreatedBefore"> (optional)</param>
    /// <param name="httpsOccurredAfter"> (optional)</param>
    /// <param name="httpsOccurredBefore"> (optional)</param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>LogisticsEventCollection</returns>
    public LogisticsEventCollection GetLogisticsEvents(string httpsLogisticsObjectId, List<string>? httpsEventType = default(List<string>?), DateTime? httpsCreatedAfter = default(DateTime?), DateTime? httpsCreatedBefore = default(DateTime?), DateTime? httpsOccurredAfter = default(DateTime?), DateTime? httpsOccurredBefore = default(DateTime?), int httpsOperationIndex = 0)
    {
        ApiResponse<LogisticsEventCollection> localVarResponse = GetLogisticsEventsWithHttpInfo(httpsLogisticsObjectId, httpsEventType, httpsCreatedAfter, httpsCreatedBefore, httpsOccurredAfter, httpsOccurredBefore);
        return localVarResponse.HttpsData;
    }

    /// <summary>
    /// Retrieves the LogisticsEvents of a given LogisticsObject Retrieve the list of LogisticsEvents of a given LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsEventType"> (optional)</param>
    /// <param name="httpsCreatedAfter"> (optional)</param>
    /// <param name="httpsCreatedBefore"> (optional)</param>
    /// <param name="httpsOccurredAfter"> (optional)</param>
    /// <param name="httpsOccurredBefore"> (optional)</param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of LogisticsEventCollection</returns>
    public ApiResponse<LogisticsEventCollection> GetLogisticsEventsWithHttpInfo(string httpsLogisticsObjectId, List<string>? httpsEventType = default(List<string>?), DateTime? httpsCreatedAfter = default(DateTime?), DateTime? httpsCreatedBefore = default(DateTime?), DateTime? httpsOccurredAfter = default(DateTime?), DateTime? httpsOccurredBefore = default(DateTime?), int httpsOperationIndex = 0)
    {
        // verify the required parameter 'logisticsObjectId' is set
        if (httpsLogisticsObjectId == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsObjectId' when calling LogisticsEventsApi->GetLogisticsEvents");
        }

        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsPathParameters.Add("logisticsObjectId", ClientUtils.ParameterToString(httpsLogisticsObjectId)); // path parameter
        if (httpsEventType != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "eventType", httpsEventType));
        }
        if (httpsCreatedAfter != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_after", httpsCreatedAfter));
        }
        if (httpsCreatedBefore != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_before", httpsCreatedBefore));
        }
        if (httpsOccurredAfter != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "occurred_after", httpsOccurredAfter));
        }
        if (httpsOccurredBefore != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "occurred_before", httpsOccurredBefore));
        }

        localVarRequestOptions.HttpsOperation = "LogisticsEventsApi.GetLogisticsEvents";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = this.HttpsClient.Get<LogisticsEventCollection>("/logistics-objects/{logisticsObjectId}/logistics-events", localVarRequestOptions, this.HttpsConfiguration);
        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("GetLogisticsEvents", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Retrieves the LogisticsEvents of a given LogisticsObject Retrieve the list of LogisticsEvents of a given LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsEventType"> (optional)</param>
    /// <param name="httpsCreatedAfter"> (optional)</param>
    /// <param name="httpsCreatedBefore"> (optional)</param>
    /// <param name="httpsOccurredAfter"> (optional)</param>
    /// <param name="httpsOccurredBefore"> (optional)</param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LogisticsEventCollection</returns>
    public async System.Threading.Tasks.Task<LogisticsEventCollection> GetLogisticsEventsAsync(string httpsLogisticsObjectId, List<string>? httpsEventType = default(List<string>?), DateTime? httpsCreatedAfter = default(DateTime?), DateTime? httpsCreatedBefore = default(DateTime?), DateTime? httpsOccurredAfter = default(DateTime?), DateTime? httpsOccurredBefore = default(DateTime?), int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        ApiResponse<LogisticsEventCollection> localVarResponse = await GetLogisticsEventsWithHttpInfoAsync(httpsLogisticsObjectId, httpsEventType, httpsCreatedAfter, httpsCreatedBefore, httpsOccurredAfter, httpsOccurredBefore, httpsOperationIndex, httpsCancellationToken).ConfigureAwait(false);
        return localVarResponse.HttpsData;
    }

    /// <summary>
    /// Retrieves the LogisticsEvents of a given LogisticsObject Retrieve the list of LogisticsEvents of a given LogisticsObject
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsLogisticsObjectId"></param>
    /// <param name="httpsEventType"> (optional)</param>
    /// <param name="httpsCreatedAfter"> (optional)</param>
    /// <param name="httpsCreatedBefore"> (optional)</param>
    /// <param name="httpsOccurredAfter"> (optional)</param>
    /// <param name="httpsOccurredBefore"> (optional)</param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LogisticsEventCollection)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<LogisticsEventCollection>> GetLogisticsEventsWithHttpInfoAsync(string httpsLogisticsObjectId, List<string>? httpsEventType = default(List<string>?), DateTime? httpsCreatedAfter = default(DateTime?), DateTime? httpsCreatedBefore = default(DateTime?), DateTime? httpsOccurredAfter = default(DateTime?), DateTime? httpsOccurredBefore = default(DateTime?), int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'logisticsObjectId' is set
        if (httpsLogisticsObjectId == null)
        {
            throw new ApiException(400, "Missing required parameter 'logisticsObjectId' when calling LogisticsEventsApi->GetLogisticsEvents");
        }


        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsPathParameters.Add("logisticsObjectId", ClientUtils.ParameterToString(httpsLogisticsObjectId)); // path parameter
        if (httpsEventType != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "eventType", httpsEventType));
        }
        if (httpsCreatedAfter != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_after", httpsCreatedAfter));
        }
        if (httpsCreatedBefore != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_before", httpsCreatedBefore));
        }
        if (httpsOccurredAfter != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "occurred_after", httpsOccurredAfter));
        }
        if (httpsOccurredBefore != null)
        {
            localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "occurred_before", httpsOccurredBefore));
        }

        localVarRequestOptions.HttpsOperation = "LogisticsEventsApi.GetLogisticsEvents";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = await this.HttpsAsynchronousClient.GetAsync<LogisticsEventCollection>("/logistics-objects/{logisticsObjectId}/logistics-events", localVarRequestOptions, this.HttpsConfiguration, httpsCancellationToken).ConfigureAwait(false);

        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("GetLogisticsEvents", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

}
