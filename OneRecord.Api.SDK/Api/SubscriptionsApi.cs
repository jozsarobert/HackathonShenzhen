/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using OneRecord.Api.SDK.Client;
using OneRecord.Api.SDK.Model;

namespace OneRecord.Api.SDK.Api;


/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISubscriptionsApiSync : IApiAccessor
{
    #region Synchronous Operations
    /// <summary>
    /// Request subscription
    /// </summary>
    /// <remarks>
    /// Send a subscription request for a Logistics Object
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsSubscription"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void CreateSubscriptionRequest(Subscription httpsSubscription, int httpsOperationIndex = 0);

    /// <summary>
    /// Request subscription
    /// </summary>
    /// <remarks>
    /// Send a subscription request for a Logistics Object
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsSubscription"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> CreateSubscriptionRequestWithHttpInfo(Subscription httpsSubscription, int httpsOperationIndex = 0);
    /// <summary>
    /// Get subscription information
    /// </summary>
    /// <remarks>
    /// Get a specific subscription object
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsTopicType"></param>
    /// <param name="httpsTopic"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>Subscription</returns>
    Subscription GetSubscription(string httpsTopicType, string httpsTopic, int httpsOperationIndex = 0);

    /// <summary>
    /// Get subscription information
    /// </summary>
    /// <remarks>
    /// Get a specific subscription object
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsTopicType"></param>
    /// <param name="httpsTopic"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Subscription</returns>
    ApiResponse<Subscription> GetSubscriptionWithHttpInfo(string httpsTopicType, string httpsTopic, int httpsOperationIndex = 0);
    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISubscriptionsApiAsync : IApiAccessor
{
    #region Asynchronous Operations
    /// <summary>
    /// Request subscription
    /// </summary>
    /// <remarks>
    /// Send a subscription request for a Logistics Object
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsSubscription"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    System.Threading.Tasks.Task CreateSubscriptionRequestAsync(Subscription httpsSubscription, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Request subscription
    /// </summary>
    /// <remarks>
    /// Send a subscription request for a Logistics Object
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsSubscription"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> CreateSubscriptionRequestWithHttpInfoAsync(Subscription httpsSubscription, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get subscription information
    /// </summary>
    /// <remarks>
    /// Get a specific subscription object
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsTopicType"></param>
    /// <param name="httpsTopic"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Subscription</returns>
    System.Threading.Tasks.Task<Subscription> GetSubscriptionAsync(string httpsTopicType, string httpsTopic, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get subscription information
    /// </summary>
    /// <remarks>
    /// Get a specific subscription object
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsTopicType"></param>
    /// <param name="httpsTopic"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Subscription)</returns>
    System.Threading.Tasks.Task<ApiResponse<Subscription>> GetSubscriptionWithHttpInfoAsync(string httpsTopicType, string httpsTopic, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken));
    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISubscriptionsApi : ISubscriptionsApiSync, ISubscriptionsApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class SubscriptionsApi : ISubscriptionsApi
{
    private ExceptionFactory _exceptionFactory = (httpsName, httpsResponse) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public SubscriptionsApi() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public SubscriptionsApi(string httpsBasePath)
    {
        this.HttpsConfiguration = Configuration.MergeConfigurations(
            GlobalConfiguration.HttpsInstance,
            new Configuration { HttpsBasePath = httpsBasePath }
        );
        this.HttpsClient = new ApiClient(this.HttpsConfiguration.HttpsBasePath);
        this.HttpsAsynchronousClient = new ApiClient(this.HttpsConfiguration.HttpsBasePath);
        this.HttpsExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="httpsConfiguration">An instance of Configuration</param>
    /// <returns></returns>
    public SubscriptionsApi(Configuration httpsConfiguration)
    {
        if (httpsConfiguration == null) throw new ArgumentNullException("httpsConfiguration");

        this.HttpsConfiguration = Configuration.MergeConfigurations(
            GlobalConfiguration.HttpsInstance,
            httpsConfiguration
        );
        this.HttpsClient = new ApiClient(this.HttpsConfiguration.HttpsBasePath);
        this.HttpsAsynchronousClient = new ApiClient(this.HttpsConfiguration.HttpsBasePath);
        HttpsExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="httpsClient">The client interface for synchronous API access.</param>
    /// <param name="httpsAsyncClient">The client interface for asynchronous API access.</param>
    /// <param name="httpsConfiguration">The configuration object.</param>
    public SubscriptionsApi(ISynchronousClient httpsClient, IAsynchronousClient httpsAsyncClient, IReadableConfiguration httpsConfiguration)
    {
        if (httpsClient == null) throw new ArgumentNullException("httpsClient");
        if (httpsAsyncClient == null) throw new ArgumentNullException("httpsAsyncClient");
        if (httpsConfiguration == null) throw new ArgumentNullException("httpsConfiguration");

        this.HttpsClient = httpsClient;
        this.HttpsAsynchronousClient = httpsAsyncClient;
        this.HttpsConfiguration = httpsConfiguration;
        this.HttpsExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient HttpsAsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient HttpsClient { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return this.HttpsConfiguration.HttpsBasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration HttpsConfiguration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory HttpsExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
            {
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            }
            return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
    }

    /// <summary>
    /// Request subscription Send a subscription request for a Logistics Object
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsSubscription"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void CreateSubscriptionRequest(Subscription httpsSubscription, int httpsOperationIndex = 0)
    {
        CreateSubscriptionRequestWithHttpInfo(httpsSubscription);
    }

    /// <summary>
    /// Request subscription Send a subscription request for a Logistics Object
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsSubscription"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<Object> CreateSubscriptionRequestWithHttpInfo(Subscription httpsSubscription, int httpsOperationIndex = 0)
    {
        // verify the required parameter 'subscription' is set
        if (httpsSubscription == null)
        {
            throw new ApiException(400, "Missing required parameter 'subscription' when calling SubscriptionsApi->CreateSubscriptionRequest");
        }

        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
            "application/ld+json"
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsData = httpsSubscription;

        localVarRequestOptions.HttpsOperation = "SubscriptionsApi.CreateSubscriptionRequest";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = this.HttpsClient.Post<Object>("/subscriptions", localVarRequestOptions, this.HttpsConfiguration);
        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("CreateSubscriptionRequest", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Request subscription Send a subscription request for a Logistics Object
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsSubscription"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async System.Threading.Tasks.Task CreateSubscriptionRequestAsync(Subscription httpsSubscription, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        await CreateSubscriptionRequestWithHttpInfoAsync(httpsSubscription, httpsOperationIndex, httpsCancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Request subscription Send a subscription request for a Logistics Object
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsSubscription"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateSubscriptionRequestWithHttpInfoAsync(Subscription httpsSubscription, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'subscription' is set
        if (httpsSubscription == null)
        {
            throw new ApiException(400, "Missing required parameter 'subscription' when calling SubscriptionsApi->CreateSubscriptionRequest");
        }


        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
            "application/ld+json"
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsData = httpsSubscription;

        localVarRequestOptions.HttpsOperation = "SubscriptionsApi.CreateSubscriptionRequest";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = await this.HttpsAsynchronousClient.PostAsync<Object>("/subscriptions", localVarRequestOptions, this.HttpsConfiguration, httpsCancellationToken).ConfigureAwait(false);

        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("CreateSubscriptionRequest", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Get subscription information Get a specific subscription object
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsTopicType"></param>
    /// <param name="httpsTopic"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>Subscription</returns>
    public Subscription GetSubscription(string httpsTopicType, string httpsTopic, int httpsOperationIndex = 0)
    {
        ApiResponse<Subscription> localVarResponse = GetSubscriptionWithHttpInfo(httpsTopicType, httpsTopic);
        return localVarResponse.HttpsData;
    }

    /// <summary>
    /// Get subscription information Get a specific subscription object
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsTopicType"></param>
    /// <param name="httpsTopic"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Subscription</returns>
    public ApiResponse<Subscription> GetSubscriptionWithHttpInfo(string httpsTopicType, string httpsTopic, int httpsOperationIndex = 0)
    {
        // verify the required parameter 'topicType' is set
        if (httpsTopicType == null)
        {
            throw new ApiException(400, "Missing required parameter 'topicType' when calling SubscriptionsApi->GetSubscription");
        }

        // verify the required parameter 'topic' is set
        if (httpsTopic == null)
        {
            throw new ApiException(400, "Missing required parameter 'topic' when calling SubscriptionsApi->GetSubscription");
        }

        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "topicType", httpsTopicType));
        localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "topic", httpsTopic));

        localVarRequestOptions.HttpsOperation = "SubscriptionsApi.GetSubscription";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = this.HttpsClient.Get<Subscription>("/subscriptions", localVarRequestOptions, this.HttpsConfiguration);
        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("GetSubscription", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Get subscription information Get a specific subscription object
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsTopicType"></param>
    /// <param name="httpsTopic"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Subscription</returns>
    public async System.Threading.Tasks.Task<Subscription> GetSubscriptionAsync(string httpsTopicType, string httpsTopic, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        ApiResponse<Subscription> localVarResponse = await GetSubscriptionWithHttpInfoAsync(httpsTopicType, httpsTopic, httpsOperationIndex, httpsCancellationToken).ConfigureAwait(false);
        return localVarResponse.HttpsData;
    }

    /// <summary>
    /// Get subscription information Get a specific subscription object
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="httpsTopicType"></param>
    /// <param name="httpsTopic"></param>
    /// <param name="httpsOperationIndex">Index associated with the operation.</param>
    /// <param name="httpsCancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Subscription)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<Subscription>> GetSubscriptionWithHttpInfoAsync(string httpsTopicType, string httpsTopic, int httpsOperationIndex = 0, System.Threading.CancellationToken httpsCancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'topicType' is set
        if (httpsTopicType == null)
        {
            throw new ApiException(400, "Missing required parameter 'topicType' when calling SubscriptionsApi->GetSubscription");
        }

        // verify the required parameter 'topic' is set
        if (httpsTopic == null)
        {
            throw new ApiException(400, "Missing required parameter 'topic' when calling SubscriptionsApi->GetSubscription");
        }


        RequestOptions localVarRequestOptions = new RequestOptions();

        string[] contentTypes = new string[] {
        };

        // to determine the Accept header
        string[] accepts = new string[] {
            "application/ld+json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HttpsHeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "topicType", httpsTopicType));
        localVarRequestOptions.HttpsQueryParameters.Add(ClientUtils.ParameterToMultiMap("", "topic", httpsTopic));

        localVarRequestOptions.HttpsOperation = "SubscriptionsApi.GetSubscription";
        localVarRequestOptions.HttpsOperationIndex = httpsOperationIndex;


        // make the HTTP request
        var localVarResponse = await this.HttpsAsynchronousClient.GetAsync<Subscription>("/subscriptions", localVarRequestOptions, this.HttpsConfiguration, httpsCancellationToken).ConfigureAwait(false);

        if (this.HttpsExceptionFactory != null)
        {
            Exception exception = this.HttpsExceptionFactory("GetSubscription", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }
        }

        return localVarResponse;
    }

}
