/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PrintJob
    /// </summary>
    [DataContract(Name = "PrintJob")]
    public partial class PrintJob : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintJob" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrintJob() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintJob" /> class.
        /// </summary>
        /// <param name="origin">The origin of the Print Job (e.g. Remote or Local Barcode) (required).</param>
        /// <param name="replaceExistingLabel">Indicates whether to replace the existing Label, in the case where the Asset is already linked to a Label.</param>
        /// <param name="includeCutLine">Indicates whether the Print Job has a cut line (where to cut a label to de-activate) included.</param>
        /// <param name="templateId">The indentifier of the Print Template.</param>
        /// <param name="createdAt">Date that the Print Job was created, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39; (required).</param>
        /// <param name="isSuccessful">Indicates whether the Print Job was successful.</param>
        /// <param name="assetId">Unique identifier of the Asset printed. Example: &#39;00Es43YBJfNRXNSvLmni&#39; (required).</param>
        /// <param name="failureReason">Describes the failure if the Print Job was unsuccessful.</param>
        /// <param name="printerId">Printer identifier - the serial number of the Printer. Example: &#39;abcdefgh123456789&#39; (required).</param>
        /// <param name="id">Unique identifier of the Print Job. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39; (required).</param>
        /// <param name="workspaceId">Unique identifier of the Workspace that the Printer belongs to. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39; (required).</param>
        /// <param name="updatedAt">Date that the Print Job was last updated, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;.</param>
        /// <param name="status">The status of the Print Job (required).</param>
        /// <param name="isComplete">Indicates whether the Print Job is complete.</param>
        public PrintJob(string origin = default(string), bool replaceExistingLabel = default(bool), bool includeCutLine = default(bool), string templateId = default(string), DateTime createdAt = default(DateTime), bool isSuccessful = default(bool), string assetId = default(string), string failureReason = default(string), string printerId = default(string), Guid id = default(Guid), Guid workspaceId = default(Guid), DateTime updatedAt = default(DateTime), string status = default(string), bool isComplete = default(bool))
        {
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for PrintJob and cannot be null");
            }
            this.Origin = origin;
            this.CreatedAt = createdAt;
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new ArgumentNullException("assetId is a required property for PrintJob and cannot be null");
            }
            this.AssetId = assetId;
            // to ensure "printerId" is required (not null)
            if (printerId == null)
            {
                throw new ArgumentNullException("printerId is a required property for PrintJob and cannot be null");
            }
            this.PrinterId = printerId;
            this.Id = id;
            this.WorkspaceId = workspaceId;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for PrintJob and cannot be null");
            }
            this.Status = status;
            this.ReplaceExistingLabel = replaceExistingLabel;
            this.IncludeCutLine = includeCutLine;
            this.TemplateId = templateId;
            this.IsSuccessful = isSuccessful;
            this.FailureReason = failureReason;
            this.UpdatedAt = updatedAt;
            this.IsComplete = isComplete;
        }

        /// <summary>
        /// The origin of the Print Job (e.g. Remote or Local Barcode)
        /// </summary>
        /// <value>The origin of the Print Job (e.g. Remote or Local Barcode)</value>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = true)]
        public string Origin { get; set; }

        /// <summary>
        /// Indicates whether to replace the existing Label, in the case where the Asset is already linked to a Label
        /// </summary>
        /// <value>Indicates whether to replace the existing Label, in the case where the Asset is already linked to a Label</value>
        [DataMember(Name = "replaceExistingLabel", EmitDefaultValue = true)]
        public bool ReplaceExistingLabel { get; set; }

        /// <summary>
        /// Indicates whether the Print Job has a cut line (where to cut a label to de-activate) included
        /// </summary>
        /// <value>Indicates whether the Print Job has a cut line (where to cut a label to de-activate) included</value>
        [DataMember(Name = "includeCutLine", EmitDefaultValue = true)]
        public bool IncludeCutLine { get; set; }

        /// <summary>
        /// The indentifier of the Print Template
        /// </summary>
        /// <value>The indentifier of the Print Template</value>
        [DataMember(Name = "templateId", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Date that the Print Job was created, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;
        /// </summary>
        /// <value>Date that the Print Job was created, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Indicates whether the Print Job was successful
        /// </summary>
        /// <value>Indicates whether the Print Job was successful</value>
        [DataMember(Name = "isSuccessful", EmitDefaultValue = true)]
        public bool IsSuccessful { get; set; }

        /// <summary>
        /// Unique identifier of the Asset printed. Example: &#39;00Es43YBJfNRXNSvLmni&#39;
        /// </summary>
        /// <value>Unique identifier of the Asset printed. Example: &#39;00Es43YBJfNRXNSvLmni&#39;</value>
        [DataMember(Name = "assetId", IsRequired = true, EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// Describes the failure if the Print Job was unsuccessful
        /// </summary>
        /// <value>Describes the failure if the Print Job was unsuccessful</value>
        [DataMember(Name = "failureReason", EmitDefaultValue = false)]
        public string FailureReason { get; set; }

        /// <summary>
        /// Printer identifier - the serial number of the Printer. Example: &#39;abcdefgh123456789&#39;
        /// </summary>
        /// <value>Printer identifier - the serial number of the Printer. Example: &#39;abcdefgh123456789&#39;</value>
        [DataMember(Name = "printerId", IsRequired = true, EmitDefaultValue = true)]
        public string PrinterId { get; set; }

        /// <summary>
        /// Unique identifier of the Print Job. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;
        /// </summary>
        /// <value>Unique identifier of the Print Job. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Unique identifier of the Workspace that the Printer belongs to. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;
        /// </summary>
        /// <value>Unique identifier of the Workspace that the Printer belongs to. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;</value>
        [DataMember(Name = "workspaceId", IsRequired = true, EmitDefaultValue = true)]
        public Guid WorkspaceId { get; set; }

        /// <summary>
        /// Date that the Print Job was last updated, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;
        /// </summary>
        /// <value>Date that the Print Job was last updated, in UTC. Example: &#39;2019-07-21T17:32:28Z&#39;</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The status of the Print Job
        /// </summary>
        /// <value>The status of the Print Job</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Indicates whether the Print Job is complete
        /// </summary>
        /// <value>Indicates whether the Print Job is complete</value>
        [DataMember(Name = "isComplete", EmitDefaultValue = true)]
        public bool IsComplete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintJob {\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  ReplaceExistingLabel: ").Append(ReplaceExistingLabel).Append("\n");
            sb.Append("  IncludeCutLine: ").Append(IncludeCutLine).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  IsSuccessful: ").Append(IsSuccessful).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  FailureReason: ").Append(FailureReason).Append("\n");
            sb.Append("  PrinterId: ").Append(PrinterId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsComplete: ").Append(IsComplete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Origin (string) maxLength
            if (this.Origin != null && this.Origin.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Origin, length must be less than 100.", new [] { "Origin" });
            }

            if (this.Origin != null) {
                // Origin (string) pattern
                Regex regexOrigin = new Regex(@"^[a-zA-Z0-9!@#$&()\-`.+,/"" ]*$", RegexOptions.CultureInvariant);
                if (!regexOrigin.Match(this.Origin).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Origin, must match a pattern of " + regexOrigin, new [] { "Origin" });
                }
            }

            // TemplateId (string) maxLength
            if (this.TemplateId != null && this.TemplateId.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateId, length must be less than 12.", new [] { "TemplateId" });
            }

            if (this.TemplateId != null) {
                // TemplateId (string) pattern
                Regex regexTemplateId = new Regex(@"^template[0-9]*$", RegexOptions.CultureInvariant);
                if (!regexTemplateId.Match(this.TemplateId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateId, must match a pattern of " + regexTemplateId, new [] { "TemplateId" });
                }
            }

            // CreatedAt (DateTime) maxLength
            if (this.CreatedAt != null && this.CreatedAt.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedAt, length must be less than 20.", new [] { "CreatedAt" });
            }

            if (this.CreatedAt != null) {
                // CreatedAt (DateTime) pattern
                Regex regexCreatedAt = new Regex(@"^[0-9TZ:-]*$", RegexOptions.CultureInvariant);
                if (!regexCreatedAt.Match(this.CreatedAt).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedAt, must match a pattern of " + regexCreatedAt, new [] { "CreatedAt" });
                }
            }

            // AssetId (string) maxLength
            if (this.AssetId != null && this.AssetId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetId, length must be less than 20.", new [] { "AssetId" });
            }

            if (this.AssetId != null) {
                // AssetId (string) pattern
                Regex regexAssetId = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexAssetId.Match(this.AssetId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetId, must match a pattern of " + regexAssetId, new [] { "AssetId" });
                }
            }

            // FailureReason (string) maxLength
            if (this.FailureReason != null && this.FailureReason.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FailureReason, length must be less than 100.", new [] { "FailureReason" });
            }

            if (this.FailureReason != null) {
                // FailureReason (string) pattern
                Regex regexFailureReason = new Regex(@"^[a-zA-Z0-9!@#$&()\-`.+,/"" ]*$", RegexOptions.CultureInvariant);
                if (!regexFailureReason.Match(this.FailureReason).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FailureReason, must match a pattern of " + regexFailureReason, new [] { "FailureReason" });
                }
            }

            // PrinterId (string) maxLength
            if (this.PrinterId != null && this.PrinterId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrinterId, length must be less than 50.", new [] { "PrinterId" });
            }

            if (this.PrinterId != null) {
                // PrinterId (string) pattern
                Regex regexPrinterId = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexPrinterId.Match(this.PrinterId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrinterId, must match a pattern of " + regexPrinterId, new [] { "PrinterId" });
                }
            }

            // Id (Guid) maxLength
            if (this.Id != null && this.Id.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 36.", new [] { "Id" });
            }

            if (this.Id != null) {
                // Id (Guid) pattern
                Regex regexId = new Regex(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id.ToString()).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            // WorkspaceId (Guid) maxLength
            if (this.WorkspaceId != null && this.WorkspaceId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkspaceId, length must be less than 36.", new [] { "WorkspaceId" });
            }

            if (this.WorkspaceId != null) {
                // WorkspaceId (Guid) pattern
                Regex regexWorkspaceId = new Regex(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", RegexOptions.CultureInvariant);
                if (!regexWorkspaceId.Match(this.WorkspaceId.ToString()).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkspaceId, must match a pattern of " + regexWorkspaceId, new [] { "WorkspaceId" });
                }
            }

            // UpdatedAt (DateTime) maxLength
            if (this.UpdatedAt != null && this.UpdatedAt.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpdatedAt, length must be less than 20.", new [] { "UpdatedAt" });
            }

            if (this.UpdatedAt != null) {
                // UpdatedAt (DateTime) pattern
                Regex regexUpdatedAt = new Regex(@"^[0-9TZ:-]*$", RegexOptions.CultureInvariant);
                if (!regexUpdatedAt.Match(this.UpdatedAt).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpdatedAt, must match a pattern of " + regexUpdatedAt, new [] { "UpdatedAt" });
                }
            }

            // Status (string) maxLength
            if (this.Status != null && this.Status.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be less than 100.", new [] { "Status" });
            }

            if (this.Status != null) {
                // Status (string) pattern
                Regex regexStatus = new Regex(@"^[a-zA-Z0-9!@#$&()\-`.+,/"" ]*$", RegexOptions.CultureInvariant);
                if (!regexStatus.Match(this.Status).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, must match a pattern of " + regexStatus, new [] { "Status" });
                }
            }

            yield break;
        }
    }

}
