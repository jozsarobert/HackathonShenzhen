/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Workspace
    /// </summary>
    [DataContract(Name = "Workspace")]
    public partial class Workspace : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Workspace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        /// <param name="printers">printers.</param>
        /// <param name="assets">assets.</param>
        /// <param name="printTemplates">printTemplates.</param>
        /// <param name="name">The name of the Workspace (required).</param>
        /// <param name="spaces">spaces.</param>
        /// <param name="id">Unique identifier of the workspace. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39; (required).</param>
        public Workspace(WorkspacePrinters printers = default(WorkspacePrinters), WorkspaceAssets assets = default(WorkspaceAssets), WorkspacePrintTemplates printTemplates = default(WorkspacePrintTemplates), string name = default(string), WorkspaceSpaces spaces = default(WorkspaceSpaces), Guid id = default(Guid))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Workspace and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.Printers = printers;
            this.Assets = assets;
            this.PrintTemplates = printTemplates;
            this.Spaces = spaces;
        }

        /// <summary>
        /// Gets or Sets Printers
        /// </summary>
        [DataMember(Name = "printers", EmitDefaultValue = false)]
        public WorkspacePrinters Printers { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", EmitDefaultValue = false)]
        public WorkspaceAssets Assets { get; set; }

        /// <summary>
        /// Gets or Sets PrintTemplates
        /// </summary>
        [DataMember(Name = "printTemplates", EmitDefaultValue = false)]
        public WorkspacePrintTemplates PrintTemplates { get; set; }

        /// <summary>
        /// The name of the Workspace
        /// </summary>
        /// <value>The name of the Workspace</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Spaces
        /// </summary>
        [DataMember(Name = "spaces", EmitDefaultValue = false)]
        public WorkspaceSpaces Spaces { get; set; }

        /// <summary>
        /// Unique identifier of the workspace. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;
        /// </summary>
        /// <value>Unique identifier of the workspace. Example: &#39;d290f1ee-6c54-4b01-90e6-d701748f0851&#39;</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Workspace {\n");
            sb.Append("  Printers: ").Append(Printers).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  PrintTemplates: ").Append(PrintTemplates).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Spaces: ").Append(Spaces).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 500.", new [] { "Name" });
            }

            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9!@#$&()\-`.+,/"" ]*$", RegexOptions.CultureInvariant);
                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            // Id (Guid) maxLength
            if (this.Id != null && this.Id.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 36.", new [] { "Id" });
            }

            if (this.Id != null) {
                // Id (Guid) pattern
                Regex regexId = new Regex(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id.ToString()).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            yield break;
        }
    }

}
