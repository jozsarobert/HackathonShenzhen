/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Gateway
    /// </summary>
    [DataContract(Name = "Gateway")]
    public partial class Gateway : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Gateway" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Gateway() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Gateway" /> class.
        /// </summary>
        /// <param name="shortId">Short human-readable Gateway identifier. Example: &#39;AB1D&#39;.</param>
        /// <param name="gatewayId">Gateway identifier, which is a combination of manufacturer and deviceId. Example: &#39;sysLoco_e10fce301222e588e1d7482b&#39; (required).</param>
        /// <param name="addedOn">ISO Timestamp of when the Gateway was linked, in UTC. Example: &#39;2023-07-21T17:32:28Z&#39;.</param>
        /// <param name="productName">Name of Gateway product. Example: &#39;HGD4&#39;.</param>
        /// <param name="manufacturer">Gateway manufacturer. Example: &#39;sysLoco&#39; (required).</param>
        public Gateway(string shortId = default(string), string gatewayId = default(string), DateTime addedOn = default(DateTime), string productName = default(string), string manufacturer = default(string))
        {
            // to ensure "gatewayId" is required (not null)
            if (gatewayId == null)
            {
                throw new ArgumentNullException("gatewayId is a required property for Gateway and cannot be null");
            }
            this.GatewayId = gatewayId;
            // to ensure "manufacturer" is required (not null)
            if (manufacturer == null)
            {
                throw new ArgumentNullException("manufacturer is a required property for Gateway and cannot be null");
            }
            this.Manufacturer = manufacturer;
            this.ShortId = shortId;
            this.AddedOn = addedOn;
            this.ProductName = productName;
        }

        /// <summary>
        /// Short human-readable Gateway identifier. Example: &#39;AB1D&#39;
        /// </summary>
        /// <value>Short human-readable Gateway identifier. Example: &#39;AB1D&#39;</value>
        [DataMember(Name = "shortId", EmitDefaultValue = false)]
        public string ShortId { get; set; }

        /// <summary>
        /// Gateway identifier, which is a combination of manufacturer and deviceId. Example: &#39;sysLoco_e10fce301222e588e1d7482b&#39;
        /// </summary>
        /// <value>Gateway identifier, which is a combination of manufacturer and deviceId. Example: &#39;sysLoco_e10fce301222e588e1d7482b&#39;</value>
        [DataMember(Name = "gatewayId", IsRequired = true, EmitDefaultValue = true)]
        public string GatewayId { get; set; }

        /// <summary>
        /// ISO Timestamp of when the Gateway was linked, in UTC. Example: &#39;2023-07-21T17:32:28Z&#39;
        /// </summary>
        /// <value>ISO Timestamp of when the Gateway was linked, in UTC. Example: &#39;2023-07-21T17:32:28Z&#39;</value>
        [DataMember(Name = "addedOn", EmitDefaultValue = false)]
        public DateTime AddedOn { get; set; }

        /// <summary>
        /// Name of Gateway product. Example: &#39;HGD4&#39;
        /// </summary>
        /// <value>Name of Gateway product. Example: &#39;HGD4&#39;</value>
        [DataMember(Name = "productName", EmitDefaultValue = false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gateway manufacturer. Example: &#39;sysLoco&#39;
        /// </summary>
        /// <value>Gateway manufacturer. Example: &#39;sysLoco&#39;</value>
        [DataMember(Name = "manufacturer", IsRequired = true, EmitDefaultValue = true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Gateway {\n");
            sb.Append("  ShortId: ").Append(ShortId).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("  AddedOn: ").Append(AddedOn).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShortId (string) maxLength
            if (this.ShortId != null && this.ShortId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShortId, length must be less than 10.", new [] { "ShortId" });
            }

            if (this.ShortId != null) {
                // ShortId (string) pattern
                Regex regexShortId = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexShortId.Match(this.ShortId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShortId, must match a pattern of " + regexShortId, new [] { "ShortId" });
                }
            }

            // GatewayId (string) maxLength
            if (this.GatewayId != null && this.GatewayId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GatewayId, length must be less than 100.", new [] { "GatewayId" });
            }

            if (this.GatewayId != null) {
                // GatewayId (string) pattern
                Regex regexGatewayId = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexGatewayId.Match(this.GatewayId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GatewayId, must match a pattern of " + regexGatewayId, new [] { "GatewayId" });
                }
            }

            // AddedOn (DateTime) maxLength
            if (this.AddedOn != null && this.AddedOn.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddedOn, length must be less than 20.", new [] { "AddedOn" });
            }

            if (this.AddedOn != null) {
                // AddedOn (DateTime) pattern
                Regex regexAddedOn = new Regex(@"^[0-9TZ:-]*$", RegexOptions.CultureInvariant);
                if (!regexAddedOn.Match(this.AddedOn).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddedOn, must match a pattern of " + regexAddedOn, new [] { "AddedOn" });
                }
            }

            // ProductName (string) maxLength
            if (this.ProductName != null && this.ProductName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductName, length must be less than 100.", new [] { "ProductName" });
            }

            if (this.ProductName != null) {
                // ProductName (string) pattern
                Regex regexProductName = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexProductName.Match(this.ProductName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductName, must match a pattern of " + regexProductName, new [] { "ProductName" });
                }
            }

            // Manufacturer (string) maxLength
            if (this.Manufacturer != null && this.Manufacturer.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Manufacturer, length must be less than 100.", new [] { "Manufacturer" });
            }

            if (this.Manufacturer != null) {
                // Manufacturer (string) pattern
                Regex regexManufacturer = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexManufacturer.Match(this.Manufacturer).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Manufacturer, must match a pattern of " + regexManufacturer, new [] { "Manufacturer" });
                }
            }

            yield break;
        }
    }

}
