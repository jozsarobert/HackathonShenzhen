/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Workspaces
    /// </summary>
    [DataContract(Name = "Workspaces")]
    public partial class Workspaces : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspaces" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Workspaces() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspaces" /> class.
        /// </summary>
        /// <param name="nextToken">Pagination token.</param>
        /// <param name="items">items (required).</param>
        public Workspaces(string nextToken = default(string), List<Workspace> items = default(List<Workspace>))
        {
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for Workspaces and cannot be null");
            }
            this.Items = items;
            this.NextToken = nextToken;
        }

        /// <summary>
        /// Pagination token
        /// </summary>
        /// <value>Pagination token</value>
        [DataMember(Name = "nextToken", EmitDefaultValue = false)]
        public string NextToken { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<Workspace> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Workspaces {\n");
            sb.Append("  NextToken: ").Append(NextToken).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NextToken (string) maxLength
            if (this.NextToken != null && this.NextToken.Length > 5000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextToken, length must be less than 5000.", new [] { "NextToken" });
            }

            if (this.NextToken != null) {
                // NextToken (string) pattern
                Regex regexNextToken = new Regex(@"^[a-zA-Z0-9!@#$&()\-`.+,/""]*$", RegexOptions.CultureInvariant);
                if (!regexNextToken.Match(this.NextToken).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextToken, must match a pattern of " + regexNextToken, new [] { "NextToken" });
                }
            }

            yield break;
        }
    }

}
