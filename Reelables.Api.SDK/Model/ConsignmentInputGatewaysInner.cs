/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ConsignmentInputGatewaysInner
    /// </summary>
    [DataContract(Name = "ConsignmentInput_gateways_inner")]
    public partial class ConsignmentInputGatewaysInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsignmentInputGatewaysInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsignmentInputGatewaysInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsignmentInputGatewaysInner" /> class.
        /// </summary>
        /// <param name="registerGateway">Indicates whether the gateway should be registered. True - will register a new gateway (productName is required) False - indicates that the gateway has already been registered.</param>
        /// <param name="deviceId">Device identifier. Example: &#39;e10fce301222e588e1d7482b&#39; (required).</param>
        /// <param name="productName">Name of Gateway product. Example: &#39;HGD4&#39;.</param>
        /// <param name="manufacturer">manufacturer (required).</param>
        public ConsignmentInputGatewaysInner(bool registerGateway = default(bool), string deviceId = default(string), string productName = default(string), ConsignmentInputGatewaysInnerManufacturer manufacturer = default(ConsignmentInputGatewaysInnerManufacturer))
        {
            // to ensure "deviceId" is required (not null)
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId is a required property for ConsignmentInputGatewaysInner and cannot be null");
            }
            this.DeviceId = deviceId;
            // to ensure "manufacturer" is required (not null)
            if (manufacturer == null)
            {
                throw new ArgumentNullException("manufacturer is a required property for ConsignmentInputGatewaysInner and cannot be null");
            }
            this.Manufacturer = manufacturer;
            this.RegisterGateway = registerGateway;
            this.ProductName = productName;
        }

        /// <summary>
        /// Indicates whether the gateway should be registered. True - will register a new gateway (productName is required) False - indicates that the gateway has already been registered
        /// </summary>
        /// <value>Indicates whether the gateway should be registered. True - will register a new gateway (productName is required) False - indicates that the gateway has already been registered</value>
        [DataMember(Name = "registerGateway", EmitDefaultValue = true)]
        public bool RegisterGateway { get; set; }

        /// <summary>
        /// Device identifier. Example: &#39;e10fce301222e588e1d7482b&#39;
        /// </summary>
        /// <value>Device identifier. Example: &#39;e10fce301222e588e1d7482b&#39;</value>
        [DataMember(Name = "deviceId", IsRequired = true, EmitDefaultValue = true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Name of Gateway product. Example: &#39;HGD4&#39;
        /// </summary>
        /// <value>Name of Gateway product. Example: &#39;HGD4&#39;</value>
        [DataMember(Name = "productName", EmitDefaultValue = false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name = "manufacturer", IsRequired = true, EmitDefaultValue = true)]
        public ConsignmentInputGatewaysInnerManufacturer Manufacturer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsignmentInputGatewaysInner {\n");
            sb.Append("  RegisterGateway: ").Append(RegisterGateway).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DeviceId (string) maxLength
            if (this.DeviceId != null && this.DeviceId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceId, length must be less than 100.", new [] { "DeviceId" });
            }

            if (this.DeviceId != null) {
                // DeviceId (string) pattern
                Regex regexDeviceId = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexDeviceId.Match(this.DeviceId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceId, must match a pattern of " + regexDeviceId, new [] { "DeviceId" });
                }
            }

            // ProductName (string) maxLength
            if (this.ProductName != null && this.ProductName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductName, length must be less than 100.", new [] { "ProductName" });
            }

            if (this.ProductName != null) {
                // ProductName (string) pattern
                Regex regexProductName = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexProductName.Match(this.ProductName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductName, must match a pattern of " + regexProductName, new [] { "ProductName" });
                }
            }

            yield break;
        }
    }

}
