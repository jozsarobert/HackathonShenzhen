/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ConsignmentInputPiecesInner
    /// </summary>
    [DataContract(Name = "ConsignmentInput_pieces_inner")]
    public partial class ConsignmentInputPiecesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsignmentInputPiecesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsignmentInputPiecesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsignmentInputPiecesInner" /> class.
        /// </summary>
        /// <param name="trackingRef">The tracking reference that identifies the Piece in the user system.</param>
        /// <param name="label">label (required).</param>
        public ConsignmentInputPiecesInner(string trackingRef = default(string), ConsignmentInputPiecesInnerLabel label = default(ConsignmentInputPiecesInnerLabel))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for ConsignmentInputPiecesInner and cannot be null");
            }
            this.Label = label;
            this.TrackingRef = trackingRef;
        }

        /// <summary>
        /// The tracking reference that identifies the Piece in the user system
        /// </summary>
        /// <value>The tracking reference that identifies the Piece in the user system</value>
        [DataMember(Name = "trackingRef", EmitDefaultValue = false)]
        public string TrackingRef { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public ConsignmentInputPiecesInnerLabel Label { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsignmentInputPiecesInner {\n");
            sb.Append("  TrackingRef: ").Append(TrackingRef).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TrackingRef (string) maxLength
            if (this.TrackingRef != null && this.TrackingRef.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackingRef, length must be less than 500.", new [] { "TrackingRef" });
            }

            yield break;
        }
    }

}
