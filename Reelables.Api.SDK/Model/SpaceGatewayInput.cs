/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SpaceGatewayInput
    /// </summary>
    [DataContract(Name = "SpaceGatewayInput")]
    public partial class SpaceGatewayInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceGatewayInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpaceGatewayInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceGatewayInput" /> class.
        /// </summary>
        /// <param name="isStatic">Indicate whether the Gateway is statically located.</param>
        /// <param name="replaceExistingGateway">Indicate whether to replace the existig Gateway, in the case where the Space is already linked to a Gateway.</param>
        /// <param name="latitude">Latitude value of the coordinate. Example: 51.123.</param>
        /// <param name="rssiFilter">rssiFilter.</param>
        /// <param name="gatewayId">Gateway identifier. Example: &#39;e00fce315222e588e1d7482b&#39; (required).</param>
        /// <param name="longitude">Longitude value of the coordinate. Example: -0.123.</param>
        public SpaceGatewayInput(bool isStatic = default(bool), bool replaceExistingGateway = default(bool), float latitude = default(float), SpaceGatewayInputRssiFilter rssiFilter = default(SpaceGatewayInputRssiFilter), string gatewayId = default(string), float longitude = default(float))
        {
            // to ensure "gatewayId" is required (not null)
            if (gatewayId == null)
            {
                throw new ArgumentNullException("gatewayId is a required property for SpaceGatewayInput and cannot be null");
            }
            this.GatewayId = gatewayId;
            this.IsStatic = isStatic;
            this.ReplaceExistingGateway = replaceExistingGateway;
            this.Latitude = latitude;
            this.RssiFilter = rssiFilter;
            this.Longitude = longitude;
        }

        /// <summary>
        /// Indicate whether the Gateway is statically located
        /// </summary>
        /// <value>Indicate whether the Gateway is statically located</value>
        [DataMember(Name = "isStatic", EmitDefaultValue = true)]
        public bool IsStatic { get; set; }

        /// <summary>
        /// Indicate whether to replace the existig Gateway, in the case where the Space is already linked to a Gateway
        /// </summary>
        /// <value>Indicate whether to replace the existig Gateway, in the case where the Space is already linked to a Gateway</value>
        [DataMember(Name = "replaceExistingGateway", EmitDefaultValue = true)]
        public bool ReplaceExistingGateway { get; set; }

        /// <summary>
        /// Latitude value of the coordinate. Example: 51.123
        /// </summary>
        /// <value>Latitude value of the coordinate. Example: 51.123</value>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public float Latitude { get; set; }

        /// <summary>
        /// Gets or Sets RssiFilter
        /// </summary>
        [DataMember(Name = "rssiFilter", EmitDefaultValue = false)]
        public SpaceGatewayInputRssiFilter RssiFilter { get; set; }

        /// <summary>
        /// Gateway identifier. Example: &#39;e00fce315222e588e1d7482b&#39;
        /// </summary>
        /// <value>Gateway identifier. Example: &#39;e00fce315222e588e1d7482b&#39;</value>
        [DataMember(Name = "gatewayId", IsRequired = true, EmitDefaultValue = true)]
        public string GatewayId { get; set; }

        /// <summary>
        /// Longitude value of the coordinate. Example: -0.123
        /// </summary>
        /// <value>Longitude value of the coordinate. Example: -0.123</value>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public float Longitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpaceGatewayInput {\n");
            sb.Append("  IsStatic: ").Append(IsStatic).Append("\n");
            sb.Append("  ReplaceExistingGateway: ").Append(ReplaceExistingGateway).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  RssiFilter: ").Append(RssiFilter).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Latitude (float) maximum
            if (this.Latitude > (float)90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Latitude, must be a value less than or equal to 90.", new [] { "Latitude" });
            }

            // Latitude (float) minimum
            if (this.Latitude < (float)-90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Latitude, must be a value greater than or equal to -90.", new [] { "Latitude" });
            }

            // GatewayId (string) maxLength
            if (this.GatewayId != null && this.GatewayId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GatewayId, length must be less than 50.", new [] { "GatewayId" });
            }

            if (this.GatewayId != null) {
                // GatewayId (string) pattern
                Regex regexGatewayId = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexGatewayId.Match(this.GatewayId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GatewayId, must match a pattern of " + regexGatewayId, new [] { "GatewayId" });
                }
            }

            // Longitude (float) maximum
            if (this.Longitude > (float)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Longitude, must be a value less than or equal to 180.", new [] { "Longitude" });
            }

            // Longitude (float) minimum
            if (this.Longitude < (float)-180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Longitude, must be a value greater than or equal to -180.", new [] { "Longitude" });
            }

            yield break;
        }
    }

}
