/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PrintJobsInputPrintJobsInner
    /// </summary>
    [DataContract(Name = "PrintJobsInput_printJobs_inner")]
    public partial class PrintJobsInputPrintJobsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintJobsInputPrintJobsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrintJobsInputPrintJobsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintJobsInputPrintJobsInner" /> class.
        /// </summary>
        /// <param name="assetId">Unique identifier of the Asset to print. Example: &#39;00Es43YBJfNRXNSvLmni&#39; (required).</param>
        /// <param name="replaceExistingLabel">Indicate whether to replace the existing Label, in the case where the Asset is already linked to a Label.</param>
        /// <param name="templateParams">Dynamic object that is used to pass any params for the POrint Template.</param>
        /// <param name="templateId">The indentifier of the Print Template.</param>
        public PrintJobsInputPrintJobsInner(string assetId = default(string), bool replaceExistingLabel = default(bool), Dictionary<string, Object> templateParams = default(Dictionary<string, Object>), string templateId = default(string))
        {
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new ArgumentNullException("assetId is a required property for PrintJobsInputPrintJobsInner and cannot be null");
            }
            this.AssetId = assetId;
            this.ReplaceExistingLabel = replaceExistingLabel;
            this.TemplateParams = templateParams;
            this.TemplateId = templateId;
        }

        /// <summary>
        /// Unique identifier of the Asset to print. Example: &#39;00Es43YBJfNRXNSvLmni&#39;
        /// </summary>
        /// <value>Unique identifier of the Asset to print. Example: &#39;00Es43YBJfNRXNSvLmni&#39;</value>
        [DataMember(Name = "assetId", IsRequired = true, EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// Indicate whether to replace the existing Label, in the case where the Asset is already linked to a Label
        /// </summary>
        /// <value>Indicate whether to replace the existing Label, in the case where the Asset is already linked to a Label</value>
        [DataMember(Name = "replaceExistingLabel", EmitDefaultValue = true)]
        public bool ReplaceExistingLabel { get; set; }

        /// <summary>
        /// Dynamic object that is used to pass any params for the POrint Template
        /// </summary>
        /// <value>Dynamic object that is used to pass any params for the POrint Template</value>
        [DataMember(Name = "templateParams", EmitDefaultValue = false)]
        public Dictionary<string, Object> TemplateParams { get; set; }

        /// <summary>
        /// The indentifier of the Print Template
        /// </summary>
        /// <value>The indentifier of the Print Template</value>
        [DataMember(Name = "templateId", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintJobsInputPrintJobsInner {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ReplaceExistingLabel: ").Append(ReplaceExistingLabel).Append("\n");
            sb.Append("  TemplateParams: ").Append(TemplateParams).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssetId (string) maxLength
            if (this.AssetId != null && this.AssetId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetId, length must be less than 20.", new [] { "AssetId" });
            }

            if (this.AssetId != null) {
                // AssetId (string) pattern
                Regex regexAssetId = new Regex(@"^[-_A-Za-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexAssetId.Match(this.AssetId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetId, must match a pattern of " + regexAssetId, new [] { "AssetId" });
                }
            }

            // TemplateId (string) maxLength
            if (this.TemplateId != null && this.TemplateId.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateId, length must be less than 12.", new [] { "TemplateId" });
            }

            if (this.TemplateId != null) {
                // TemplateId (string) pattern
                Regex regexTemplateId = new Regex(@"^template[0-9]*$", RegexOptions.CultureInvariant);
                if (!regexTemplateId.Match(this.TemplateId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateId, must match a pattern of " + regexTemplateId, new [] { "TemplateId" });
                }
            }

            yield break;
        }
    }

}
