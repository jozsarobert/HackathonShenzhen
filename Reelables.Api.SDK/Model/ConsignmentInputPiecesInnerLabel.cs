/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ConsignmentInputPiecesInnerLabel
    /// </summary>
    [DataContract(Name = "ConsignmentInput_pieces_inner_label")]
    public partial class ConsignmentInputPiecesInnerLabel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsignmentInputPiecesInnerLabel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsignmentInputPiecesInnerLabel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsignmentInputPiecesInnerLabel" /> class.
        /// </summary>
        /// <param name="nfcId">Label NFC identifier. Example: &#39;0514abcdef10000&#39; (required).</param>
        public ConsignmentInputPiecesInnerLabel(string nfcId = default(string))
        {
            // to ensure "nfcId" is required (not null)
            if (nfcId == null)
            {
                throw new ArgumentNullException("nfcId is a required property for ConsignmentInputPiecesInnerLabel and cannot be null");
            }
            this.NfcId = nfcId;
        }

        /// <summary>
        /// Label NFC identifier. Example: &#39;0514abcdef10000&#39;
        /// </summary>
        /// <value>Label NFC identifier. Example: &#39;0514abcdef10000&#39;</value>
        [DataMember(Name = "nfcId", IsRequired = true, EmitDefaultValue = true)]
        public string NfcId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsignmentInputPiecesInnerLabel {\n");
            sb.Append("  NfcId: ").Append(NfcId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NfcId (string) maxLength
            if (this.NfcId != null && this.NfcId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NfcId, length must be less than 20.", new [] { "NfcId" });
            }

            if (this.NfcId != null) {
                // NfcId (string) pattern
                Regex regexNfcId = new Regex(@"^[a-zA-Z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexNfcId.Match(this.NfcId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NfcId, must match a pattern of " + regexNfcId, new [] { "NfcId" });
                }
            }

            yield break;
        }
    }

}
