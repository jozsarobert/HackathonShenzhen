/*
 * Reelables API
 *
 * RESTful API for communicating with the Reelables Platform.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: team@reelables.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Temperature
    /// </summary>
    [DataContract(Name = "Temperature")]
    public partial class Temperature : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Temperature" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Temperature() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Temperature" /> class.
        /// </summary>
        /// <param name="degreesCelcius">Temperature value rounded to 1 decimal place, for each minute of the hour. Example: -2.1 (required).</param>
        /// <param name="timestamp">Timestamp of the temperature. Example: &#39;2019-07-21T17:32:28Z&#39; (required).</param>
        /// <param name="numberReadings">The number of readings that were used to evaluate the temperature value.</param>
        public Temperature(float degreesCelcius = default(float), DateTime timestamp = default(DateTime), int numberReadings = default(int))
        {
            this.DegreesCelcius = degreesCelcius;
            this.Timestamp = timestamp;
            this.NumberReadings = numberReadings;
        }

        /// <summary>
        /// Temperature value rounded to 1 decimal place, for each minute of the hour. Example: -2.1
        /// </summary>
        /// <value>Temperature value rounded to 1 decimal place, for each minute of the hour. Example: -2.1</value>
        [DataMember(Name = "degreesCelcius", IsRequired = true, EmitDefaultValue = true)]
        public float DegreesCelcius { get; set; }

        /// <summary>
        /// Timestamp of the temperature. Example: &#39;2019-07-21T17:32:28Z&#39;
        /// </summary>
        /// <value>Timestamp of the temperature. Example: &#39;2019-07-21T17:32:28Z&#39;</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// The number of readings that were used to evaluate the temperature value
        /// </summary>
        /// <value>The number of readings that were used to evaluate the temperature value</value>
        [DataMember(Name = "numberReadings", EmitDefaultValue = false)]
        public int NumberReadings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Temperature {\n");
            sb.Append("  DegreesCelcius: ").Append(DegreesCelcius).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  NumberReadings: ").Append(NumberReadings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DegreesCelcius (float) maximum
            if (this.DegreesCelcius > (float)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DegreesCelcius, must be a value less than or equal to 500.", new [] { "DegreesCelcius" });
            }

            // DegreesCelcius (float) minimum
            if (this.DegreesCelcius < (float)-100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DegreesCelcius, must be a value greater than or equal to -100.", new [] { "DegreesCelcius" });
            }

            // Timestamp (DateTime) maxLength
            if (this.Timestamp != null && this.Timestamp.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timestamp, length must be less than 20.", new [] { "Timestamp" });
            }

            if (this.Timestamp != null) {
                // Timestamp (DateTime) pattern
                Regex regexTimestamp = new Regex(@"^[0-9TZ:-]*$", RegexOptions.CultureInvariant);
                if (!regexTimestamp.Match(this.Timestamp).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timestamp, must match a pattern of " + regexTimestamp, new [] { "Timestamp" });
                }
            }

            // NumberReadings (int) maximum
            if (this.NumberReadings > (int)1000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberReadings, must be a value less than or equal to 1000000.", new [] { "NumberReadings" });
            }

            // NumberReadings (int) minimum
            if (this.NumberReadings < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberReadings, must be a value greater than or equal to 0.", new [] { "NumberReadings" });
            }

            yield break;
        }
    }

}
